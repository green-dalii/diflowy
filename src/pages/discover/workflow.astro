---
import MainLayout from "../../layouts/MainLayout.astro";
import SectionTitle from "../../components/ui/SectionTitle.astro";
import Section from "../../components/sections/Section.astro";
import ReactFlowPreview from "../../components/flow/ReactFlowPreview";
import "../../styles/globals.css";
const description =
  "You can use Dify to create workflows and share them with others.";
---

<MainLayout title="Diflowy" description="Where Dify workflows are stored">
  <div class="mt-48">
    <Section>
      <SectionTitle sectionTitle="Workflow" description={description} />
      <div id="workflow" class="flex flex-col space-y-4">
        <div class="w-full">
          <h3>Workflow Preview</h3>
          <div class="h-96 sm:h-[600px]">
            <ReactFlowPreview client:load />
          </div>
        </div>
        <div class="space-y-4">
          <div class="flex flex-row space-x-4 items-center">
            <div
              id="workflowicon"
              class="flex-none rounded-full bg-blue h-12 w-12 text-3xl text-center content-center"
            >
            </div>
            <h3 id="workflowname" class="w-full sm:w-1/2">Workflow Name</h3>
          </div>
          <div class="flex flex-row space-x-4 items-center">
            <div id="author" class="text-sm">Author</div>
            <div id="authorInfo" class="text-sm">AuthorInfo</div>
          </div>
          <h4 id="workflowname" class="w-full sm:w-1/2">Description</h4>
          <p id="description" class="text-sm text-gray-500 w-full sm:w-1/2">
            Loading...
          </p>
          <div id="tagsarea" class="w-full sm:w-1/2"></div>
          <!-- Button -->
          <div
            class="mt-16 w-full sm:w-1/2 flex items-center justify-end gap-x-6"
          >
            <button
              type="button"
              class="btn-tertiary px-3 py-2 text-sm font-semibold focus-visible:outline focus-visible:outline-2"
              >Copy DSL URL</button
            >
            <button
              class="btn-tertiary px-3 py-2 text-sm font-semibold focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2"
              >Download</button
            >
          </div>
        </div>
      </div>
    </Section>
  </div>
</MainLayout>

<script>
  import { parseYamlToReactFlow } from "../../components/flow/yamlParser";
  interface WorkflowContentResponse {
    id: string;
    name: string;
    description: string;
    tags: string[];
    icon: string;
    authorData: WorkflowAuthor;
    file_content?: string;
  }

  interface WorkflowAuthor {
    authorName: string;
    socialLink?: string;
  }

  async function loadWorkflow(): Promise<WorkflowContentResponse> {
    console.log("Executing loadWorkflow...");
    const urlParams = new URLSearchParams(window.location.search);
    const workflowId = urlParams.get("id") as string;
    const url = new URL("/api/workflow", window.location.origin);
    url.searchParams.append("workflowId", workflowId);
    console.log("Getting workflow from:", url.toString());
    const response = await fetch(url.toString());
    if (!response.ok) {
      console.error("Failed to fetch workflows");
      alert("Failed to fetch workflows");
    }
    return (await response.json()) as WorkflowContentResponse;
  }

  document.addEventListener("DOMContentLoaded", async (_) => {
    console.log("DOMContentLoaded.");
    // Get workflow from API
    try {
      const workflowName = document.getElementById(
        "workflowname",
      ) as HTMLHeadingElement;
      const workflowIcon = document.getElementById(
        "workflowicon",
      ) as HTMLImageElement;
      const workflowDescription = document.getElementById(
        "description",
      ) as HTMLParagraphElement;
      const workflowTags = document.getElementById(
        "tagsarea",
      ) as HTMLDivElement;
      const workflowAuthor = document.getElementById(
        "author",
      ) as HTMLDivElement;
      const workflowAuthorInfo = document.getElementById(
        "authorInfo",
      ) as HTMLDivElement;
      console.log("Call loadWorkflow...");
      const workflow = await loadWorkflow();
      console.log("Workflow Got>>>>");
      const { nodes, edges } = parseYamlToReactFlow(
        workflow.file_content as string,
      );
      // Update the ReactFlow component
      window.addEventListener("updateReactFlowReady", () => {
        if (typeof (window as any).updateReactFlow === "function") {
          (window as any).updateReactFlow(nodes, edges);
        } else {
          console.error("updateReactFlow function not found");
        }
      });
      // Update the workflow info
      workflowIcon.innerText = workflow.icon;
      workflowName.innerText = workflow.name;
      workflowDescription.innerText = workflow.description;
      workflowAuthor.innerText = workflow.authorData.authorName;
      workflowAuthorInfo.innerText = workflow.authorData.socialLink || "";

      const tagsHTML = workflow.tags
        .map((tag: string) => `<span class="tag text-xs">${tag}</span>`)
        .join("");

      workflowTags.innerHTML = tagsHTML;
      console.log("Workflow info updated.");
    } catch (error) {
      console.error("Error loading workflow:", error);
      alert("Error loading workflow");
    }
  });
</script>
