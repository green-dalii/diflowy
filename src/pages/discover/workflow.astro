---
import MainLayout from "../../layouts/MainLayout.astro";
import SectionTitle from "../../components/ui/SectionTitle.astro";
import Section from "../../components/sections/Section.astro";
import ReactFlowPreview from "../../components/flow/ReactFlowPreview";
import { Icon } from "astro-icon/components";
import "../../styles/globals.css";
const description =
  "You can view, import or download workflow you like to your Dify directly.";
---

<MainLayout
  title="Workflow | Diflowy"
  description="Where Dify workflows are stored"
>
  <div class="mt-48">
    <Section>
      <SectionTitle sectionTitle="Workflow" description={description} />
      <div id="workflow" class="flex flex-col space-y-4">
        <div class="w-full">
          <h3>Workflow Preview</h3>
          <div class="h-96 sm:h-[600px]">
            <ReactFlowPreview client:only="react" />
          </div>
        </div>
        <div class="w-full sm:w-1/2">
          <div class="flex flex-row space-x-4 items-center mt-10">
            <div
              id="workflowicon"
              class="flex-none rounded-full bg-blue h-12 w-12 text-3xl text-center content-center"
            >
            </div>
            <h3 id="workflowname" class="">Workflow Name</h3>
          </div>
          <div class="flex flex-row space-x-4 items-center mt-5">
            <div id="author" class="text-sm">Author</div>
            <div id="authorInfo" class="text-sm">AuthorInfo</div>
          </div>
          <h4 id="workflowname" class="mt-10">Description</h4>
          <p id="description" class="text-sm text-gray-500">Loading...</p>
          <div id="tagsarea" class="mt-10"></div>
          <div class="mt-10">
            <h4>üëÅÔ∏è Before You Use</h4>
            <ul
              class="list-disc list-outside mt-2 text-xs text-gray-500 pl-4 space-y-2"
            >
              <li>Please check the workflow's security before using it.</li>
              <li>
                Maybe You should setup your own LLM and API keys before using
                it.
              </li>
              <li>
                Maybe you should modify the workflow content according to your
                requirements.
              </li>
            </ul>
          </div>
          <!-- Button -->
          <div
            class="flex flex-col sm:flex-row items-center justify-end gap-4 mt-32"
          >
            <button
              id="copyButton"
              class="flex w-full justify-center sm:justify-start items-center btn-tertiary px-3 py-2 text-sm font-semibold focus-visible:outline focus-visible:outline-2"
            >
              <Icon name="import" class="text-2xl mr-1" />Import to Dify
            </button>
            <button
              id="downloadButton"
              class="flex w-full justify-center sm:justify-start items-center btn-tertiary px-3 py-2 text-sm font-semibold focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2"
              ><Icon name="download" class="text-2xl mr-1" />Download</button
            >
          </div>
        </div>
      </div>
    </Section>
  </div>
</MainLayout>

<script>
  import { parseYamlToReactFlow } from "../../components/flow/yamlParser";

  const importStepImg = `<img src="${window.location.origin}/importStep.webp" class="w-full object-cover rounded-lg my-8" />`
  interface WorkflowContentResponse {
    id: string;
    name: string;
    description: string;
    tags: string[];
    icon: string;
    authorData: WorkflowAuthor;
    file_content?: string;
  }

  interface WorkflowAuthor {
    authorName: string;
    socialLink?: string;
  }

  // Get the modal element
  const modal = document.getElementById("modal") as HTMLDialogElement;
  const modalTitle = document.getElementById(
    "modalTitle",
  ) as HTMLHeadingElement;
  const modalContent = document.getElementById(
    "modalContent",
  ) as HTMLDivElement;

  async function loadWorkflow(): Promise<WorkflowContentResponse> {
    console.log("Executing loadWorkflow...");
    const urlParams = new URLSearchParams(window.location.search);
    const workflowId = urlParams.get("id") as string;
    const url = new URL("/api/workflow", window.location.origin);
    url.searchParams.append("workflowId", workflowId);
    console.log("Getting workflow from:", url.toString());
    const response = await fetch(url.toString());
    if (!response.ok) {
      console.error("Failed to fetch workflows");
      // alert("Failed to fetch workflows");
      console.error("Failed to fetch workflows");
      modalTitle.innerText = "‚ö†Ô∏è Error";
      modalContent.innerText =
        "Failed to fetch workflows. Please check your connection and try again.";
      modal.showModal();
    }
    return (await response.json()) as WorkflowContentResponse;
  }

  document.addEventListener("DOMContentLoaded", async (_) => {
    console.log("DOMContentLoaded.");
    // Get workflow from API
    try {
      const workflowName = document.getElementById(
        "workflowname",
      ) as HTMLHeadingElement;
      const workflowIcon = document.getElementById(
        "workflowicon",
      ) as HTMLImageElement;
      const workflowDescription = document.getElementById(
        "description",
      ) as HTMLParagraphElement;
      const workflowTags = document.getElementById(
        "tagsarea",
      ) as HTMLDivElement;
      const workflowAuthor = document.getElementById(
        "author",
      ) as HTMLDivElement;
      const workflowAuthorInfo = document.getElementById(
        "authorInfo",
      ) as HTMLDivElement;
      console.log("Call loadWorkflow...");
      const workflow = await loadWorkflow();
      console.log("Workflow Got, Preparing Flow Data...");
      const { nodes, edges } = parseYamlToReactFlow(
        workflow.file_content as string,
      );
      console.log(
        "Flow Data Prepared, Updating ReactFlow...NODE/EDGE>>>",
        nodes,
        edges,
      );
      // Update the ReactFlow component
      window.addEventListener("updateReactFlowReady", () => {
        if (typeof (window as any).updateReactFlow === "function") {
          (window as any).updateReactFlow(nodes, edges);
          console.log("ReactFlow updated.");
        } else {
          console.error("updateReactFlow function not found");
        }
      });
      // Update the workflow info
      workflowIcon.innerText = workflow.icon;
      workflowName.innerText = workflow.name;
      workflowDescription.innerText = workflow.description;
      workflowAuthor.innerText = workflow.authorData.authorName;
      workflowAuthorInfo.innerText = workflow.authorData.socialLink || "";

      const tagsHTML = workflow.tags
        .map(
          (tag: string) =>
            `<a href="${window.location.origin}/discover?tags=${tag}"><span class="tag text-xs">${tag}</span></a>`,
    )
        .join("");

      workflowTags.innerHTML = tagsHTML;
      console.log("Workflow info updated.");
      // Download workflow function
      async function downloadWorkflow() {
        const a = document.createElement("a") as HTMLAnchorElement;
        const blob = new Blob([workflow.file_content as string], {
          type: "text/yaml",
        });
        const url = URL.createObjectURL(blob);
        a.href = url;
        a.download = `${workflow.name}.yml`;
        document.body.appendChild(a);
        a.click();
        URL.revokeObjectURL(url);
        document.body.removeChild(a);
      }
      // copy download url function
      function copyDownloadUrl() {
        const downloadUrl = `${window.location.origin}/api/workflow/download/${workflow.id}`;
        navigator.clipboard.writeText(downloadUrl).then(() => {
          // alert(
          //   "Download URL copied to clipboard! Please paste it to your browser to Dify import window and then click 'Confirm' Button below.",
          // );
          modalTitle.innerText = "üéâ Tada!";
          modalContent.innerText =
            "The Workflow's URL has copied to your clipboard! You can paste and import it to your Dify directly.";
          modalContent.innerHTML += `<br><div class="break-words italic text-sm bg-gray-100 dark:bg-[--darkbgoffset] text-gray-500 dark:text-blue px-2 py-1 rounded-md my-2">${downloadUrl}</div>`;
          modalContent.innerHTML += importStepImg;
          modal.showModal();
          console.log("Download URL>>>", downloadUrl);
        });
      }
      // Add event listeners to buttons
      const downloadButton = document.getElementById(
        "downloadButton",
      ) as HTMLButtonElement;
      const copyButton = document.getElementById(
        "copyButton",
      ) as HTMLButtonElement;
      downloadButton.addEventListener("click", downloadWorkflow);
      copyButton.addEventListener("click", copyDownloadUrl);
    } catch (error) {
      console.error("Error loading workflow:", error);
      // alert("Error loading workflow");
    }
  });
</script>
