---
import MainLayout from "../layouts/MainLayout.astro";
import SectionTitle from "../components/ui/SectionTitle.astro";
import Section from "../components/sections/Section.astro";
import EditModal from "../components/ui/EditModal.astro";
import "../styles/globals.css";
const description = "In User Center you can manage your Dify workflows.";
---

<MainLayout
  title="Blog | Diflowy"
  description="Where Dify workflows are stored"
>
  <div class="mt-48">
    <Section>
      <SectionTitle sectionTitle="User Center" description={description} />
      <div class="sm:grid sm:grid-cols-6 mt-40">
        <div id="not-login" class="sm:col-start-3 sm:col-span-2 text-center">
          <p class="text-sm mb-5">
            Please Login before entering the User Center.
          </p>
          <a id="login-link" href="/login"
            ><button class="btn-tertiary w-full xl:w-auto py-2" id="login"
              >üîê Login</button
            >
          </a>
        </div>
      </div>
      <div id="protected-content" style="display: none;">
        <table class="table table-fixed w-full">
          <colgroup>
            <col class="w-1/12" />
            <col class="w-3/12" />
            <col class="w-2/12" />
            <col class="w-2/12" />
            <col class="w-2/12" />
            <col class="w-2/12" />
          </colgroup>
          <thead>
            <tr>
              <th class="hidden sm:block">No.</th>
              <th>Workflow Name</th>
              <th class="hidden sm:block">Latest Version</th>
              <th>Metadata</th>
              <th>Update Version</th>
              <th>Delete</th>
            </tr>
          </thead>
          <tbody id="workflowTable"> </tbody>
        </table>
        <div class="mt-14 text-center">
          <div class="join" id="pagination"></div>
        </div>
      </div>
      <EditModal />
    </Section>
  </div>
</MainLayout>

<script>
  import { updatePagination, fetchWorkflows, JWTError } from "../utils/tools";
  import type { Workflow, GetWorkflowsResponse } from "../utils/tools";
  const workflowTableBody = document.getElementById(
    "workflowTable",
  ) as HTMLTableSectionElement;
  // Get the modal element
  const modal = document.getElementById("modal") as HTMLDialogElement;
  const modalTitle = document.getElementById(
    "modalTitle",
  ) as HTMLHeadingElement;
  const modalContent = document.getElementById(
    "modalContent",
  ) as HTMLDivElement;
  const confirmBtn = document.getElementById("confirmBtn") as HTMLButtonElement;

  // Get Edit modal
  const editModal = document.getElementById("editModal") as HTMLDialogElement;
  const editModalTitle = document.getElementById(
    "editModalTitle",
  ) as HTMLHeadingElement;
  const editMetaForm = document.getElementById(
    "editMetaForm",
  ) as HTMLDivElement;
  const updateForm = document.getElementById("updateForm") as HTMLDivElement;
  const editModalConfirmBtn = document.getElementById(
    "editConfirmBtn",
  ) as HTMLButtonElement;

  function updateUserWorkflowsTable(workflowsResponse: GetWorkflowsResponse) {
    workflowTableBody.innerHTML = "";
    const workflows = workflowsResponse.workflows as Workflow[];
    const page = workflowsResponse.page as number;
    const pageSize = workflowsResponse.pageSize as number;
    workflows.forEach((workflow: Workflow, index: number) => {
      const row = document.createElement("tr");
      row.classList.add("hover");
      row.id = `${workflow.id}`;
      row.innerHTML = `
        <td class="hidden sm:block">${index + 1 + pageSize * (page - 1)}</td>
        <td><a href="/discover/workflow?id=${workflow.id}" class="hover:text-dark">${workflow.name}</a></td>
        <td class="hidden sm:block">${workflow.latestVersion}</td>
        <td>
            <button class="btn btn-wide btn-outline btn-sm btn-info edit" data-workflow-id="${workflow.id}" data-workflow-name="${workflow.name}" data-workflow-tags="${workflow.tags}" data-workflow-description="${workflow.description}" data-workflow-author="${workflow.authorData}">
              üìù <span class="hidden sm:block ml-1">Edit</span>
            </button>
        </td>
        <td>
          <button class="btn btn-wide btn-outline btn-sm btn-success update" data-workflow-id="${workflow.id}" data-workflow-ver="${workflow.latestVersion}">
              üöÄ <span class="hidden sm:block ml-1">Upload New</span>
          </button>
        </td>
        <td>
          <button class="btn btn-wide btn-outline btn-sm btn-error delete" data-workflow-id="${workflow.id}">
              üóëÔ∏è <span class="hidden sm:block ml-1">Delete</span>
          </button>
        </td>
      `;
      workflowTableBody.appendChild(row);
    });
  }

  async function loadPageData(page: number = 1) {
    try {
      const workflowsResponse = await fetchWorkflows(
        page,
        10,
        undefined,
        "yes",
      );
      updateUserWorkflowsTable(workflowsResponse);
      updatePagination(
        workflowsResponse.total,
        workflowsResponse.page,
        workflowsResponse.pageSize,
        loadPageData,
      );
      // Bind click event to each workflow's mangae buttons
      workflowTableBody.addEventListener("click", (event) => {
        const target = event.target as HTMLElement;
        const workflowId = target.dataset.workflowId;
        editModalConfirmBtn.textContent = "Save";
        editModalConfirmBtn.classList.add("btn-success");
        // click edit button
        if (target.classList.contains("edit")) {
          console.log("Clicked the edit button of", workflowId);
          editModalTitle.innerText = "Edit Workflow Metadata";
          // Fill in metadata
          const editWorkflowName = document.getElementById("editWorkflowName") as HTMLInputElement;
          const editWorkflowAuthor = document.getElementById("editWorkflowAuthor") as HTMLInputElement;
          const editWorkflowAuthorLink = document.getElementById("editWorkflowAuthorLink") as HTMLInputElement;
          const editWorkflowDescription = document.getElementById("editWorkflowDescription") as HTMLTextAreaElement;
          editWorkflowName.value = target.dataset.workflowName as string;
          editWorkflowAuthor.value = JSON.parse(target.dataset.workflowAuthorData as string).authorName as string;
          editWorkflowAuthorLink.value = JSON.parse(target.dataset.workflowAuthorData as string).socialLink as string;
          editWorkflowDescription.value = target.dataset.workflowDescription as string
          editModalConfirmBtn.setAttribute(
            "onclick",
            "window.location.href='/api/workflow/update'",
          );
          editModalConfirmBtn.classList.toggle("hidden", false);
          editMetaForm.classList.toggle("hidden", false);
          updateForm.classList.toggle("hidden", true);
          editModal.showModal();
        }
        // click update button
        if (target.classList.contains("update")) {
          const workflowVer = target.dataset.workflowVer;
          const updateVersionInput = document.getElementById(
            "updateVersionInput",
          ) as HTMLInputElement;
          console.log("Clicked the update button of", workflowId, workflowVer);
          const expectVersion = Number(workflowVer) + 0.1;
          updateVersionInput.value = String(expectVersion);
          updateVersionInput.placeholder = String(expectVersion);
          const editModalUpdateNote = document.getElementById(
            "editModalUpdateNote",
          ) as HTMLParagraphElement;
          editModalUpdateNote.innerHTML = `‚ö†Ô∏è Note: Currently the latest version of this workflow is <span calss="font-bold">${workflowVer}</span>, the updated version must be bigger than it.`;
          editModalTitle.innerText = "Update Workflow Version";
          editModalConfirmBtn.classList.toggle("hidden", false);
          editMetaForm.classList.toggle("hidden", true);
          updateForm.classList.toggle("hidden", false);
          editModal.showModal();
        }
        // click delete button
        if (target.classList.contains("delete")) {
          console.log("Clicked the delete button of", workflowId);
          modalTitle.innerText = "ü§î Delect?";
          modalContent.innerText =
            "Confirm to delete this workflow and all its version records?";
          confirmBtn.textContent = "Delete";
          confirmBtn.classList.add("btn-error");
          confirmBtn.classList.remove("hidden");
          confirmBtn.setAttribute(
            "onclick",
            "window.location.href='/api/workflow/delect'",
          );
          modal.showModal();
        }
      });
    } catch (error) {
      if (error instanceof JWTError) {
        modalTitle.innerText = "üòÆ Opps...";
        modalContent.innerText = "Your login has expired, please login again!";
        const confirmBtn = document.getElementById(
          "confirmBtn",
        ) as HTMLButtonElement;
        confirmBtn.textContent = "Login again";
        confirmBtn.classList.add("btn-error");
        confirmBtn.classList.remove("hidden");
        confirmBtn.setAttribute(
          "onclick",
          "window.location.href='/api/login/github'",
        );
        modal.showModal();
      } else {
        console.error("Error loading page data:", error);
        modalTitle.innerText = "‚ö†Ô∏è Error";
        modalContent.innerText =
          "Failed to fetch workflows. Please check your connection and try again.";
        modal.showModal();
      }
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    loadPageData(1);
  });
</script>
