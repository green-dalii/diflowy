---
import MainLayout from "../layouts/MainLayout.astro";
import SectionTitle from "../components/ui/SectionTitle.astro";
import Section from "../components/sections/Section.astro";
import EditModal from "../components/ui/EditModal.astro";
import "../styles/globals.css";
const description = "In User Center you can manage your Dify workflows.";
const skeletonCount = 10;
---

<MainLayout
  title="Blog | Diflowy"
  description="Where Dify workflows are stored"
>
  <div class="mt-48">
    <Section>
      <SectionTitle sectionTitle="User Center" description={description} />
      <div class="sm:grid sm:grid-cols-6 mt-40">
        <div id="not-login" class="sm:col-start-3 sm:col-span-2 text-center">
          <p class="text-sm mb-5">
            Please Login before entering the User Center.
          </p>
          <a id="login-link" href="/login"
            ><button class="btn-tertiary w-full xl:w-auto py-2" id="login"
              >üîê Login</button
            >
          </a>
        </div>
      </div>
      <div id="protected-content" style="display: none;">
        <table class="table table-fixed w-full">
          <thead>
            <tr>
              <th class="text-wrap hidden sm:table-cell sm:w-1/12">No.</th>
              <th class="text-wrap w-6/12 sm:3/12">Workflow Name</th>
              <th class="text-wrap hidden sm:table-cell sm:w-2/12"
                >Latest Version</th
              >
              <th class="text-wrap w-2/12">Metadata</th>
              <th class="text-wrap w-2/12">Update Version</th>
              <th class="text-wrap w-2/12">Delete</th>
            </tr>
          </thead>
          <tbody id="workflowTable">
            <!-- Workflow rows will be dynamically replaced here -->
            {
              new Array(skeletonCount).fill(null).map((_) => (
                <tr>
                  <td class="hidden sm:table-cell sm:w-1/12">...</td>
                  <td class="w-6/12 sm:3/12">Loading...</td>
                  <td class="hidden sm:table-cell sm:w-2/12">...</td>
                  <td class="w-2/12">...</td>
                  <td class="w-2/12">...</td>
                  <td class="w-2/12">...</td>
                </tr>
              ))
            }
          </tbody>
        </table>
        <div class="mt-14 text-center">
          <div class="join" id="pagination"></div>
        </div>
      </div>
      <EditModal />
    </Section>
  </div>
</MainLayout>

<script>
  import { updatePagination, fetchWorkflows, JWTError } from "../utils/tools";
  import type { Workflow, GetWorkflowsResponse } from "../utils/tools";

  // Get the table body element
  const workflowTableBody = document.getElementById(
    "workflowTable",
  ) as HTMLTableSectionElement;

  // Get the modal element
  const modal = document.getElementById("modal") as HTMLDialogElement;
  const modalTitle = document.getElementById(
    "modalTitle",
  ) as HTMLHeadingElement;
  const modalContent = document.getElementById(
    "modalContent",
  ) as HTMLDivElement;
  const confirmBtn = document.getElementById("confirmBtn") as HTMLButtonElement;

  // Get Edit modal element
  const editModal = document.getElementById("editModal") as HTMLDialogElement;
  const editModalTitle = document.getElementById(
    "editModalTitle",
  ) as HTMLHeadingElement;
  const editMetaForm = document.getElementById(
    "editMetaForm",
  ) as HTMLDivElement;
  const updateForm = document.getElementById("updateForm") as HTMLDivElement;
  const editModalConfirmBtn = document.getElementById(
    "editConfirmBtn",
  ) as HTMLButtonElement;
  const updateConfirmBtn = document.getElementById(
    "updateConfirmBtn",
  ) as HTMLButtonElement;
  const reactFlowPreview = document.getElementById(
    "reactFlowPreview",
  ) as HTMLDivElement;

  // Update Workfow Table
  function updateUserWorkflowsTable(workflowsResponse: GetWorkflowsResponse) {
    workflowTableBody.innerHTML = "";
    const workflows = workflowsResponse.workflows as Workflow[];
    const page = workflowsResponse.page as number;
    const pageSize = workflowsResponse.pageSize as number;
    workflows.forEach((workflow: Workflow, index: number) => {
      const row = document.createElement("tr");
      row.classList.add("hover");
      row.id = `${workflow.id}`;
      const tagsBase64 = btoa(JSON.stringify(workflow.tags));
      row.innerHTML = `
        <td class="hidden sm:table-cell sm:w-1/12">${index + 1 + pageSize * (page - 1)}</td>
        <td class="w-6/12 sm:3/12"><a href="/discover/workflow?id=${workflow.id}" class="hover:text-dark">${workflow.name}</a></td>
        <td class="hidden sm:table-cell sm:w-2/12">${workflow.latestVersion}</td>
        <td class="w-2/12">
            <button class="btn w-full btn-outline btn-sm btn-info edit" data-workflow-id="${workflow.id}" data-workflow-name="${workflow.name}" data-workflow-tags="${tagsBase64}" data-workflow-description="${workflow.description}" data-workflow-author="${JSON.parse(workflow.authorData).authorName}" data-workflow-social-link="${JSON.parse(workflow.authorData).socialLink}">
              üìù <span class="hidden lg:block ml-1 data-workflow-id="${workflow.id}" data-workflow-name="${workflow.name}" data-workflow-tags="${tagsBase64}" data-workflow-description="${workflow.description}" data-workflow-author="${JSON.parse(workflow.authorData).authorName}" data-workflow-social-link="${JSON.parse(workflow.authorData).socialLink}">Edit</span>
            </button>
        </td>
        <td class="w-2/12">
          <button class="btn w-full btn-outline btn-sm btn-success update" data-workflow-id="${workflow.id}" data-workflow-name="${workflow.name}" data-workflow-ver="${workflow.latestVersion}">
              üöÄ <span class="hidden lg:block ml-1 data-workflow-id="${workflow.id}" data-workflow-name="${workflow.name}" data-workflow-ver="${workflow.latestVersion}">Update</span>
          </button>
        </td>
        <td class="w-2/12">
          <button class="btn w-full btn-outline btn-sm btn-error delete" data-workflow-id="${workflow.id}" data-workflow-name="${workflow.name}">
              üóëÔ∏è <span class="hidden lg:block ml-1 data-workflow-id="${workflow.id}" data-workflow-name="${workflow.name}">Delete</span>
          </button>
        </td>
      `;
      workflowTableBody.appendChild(row);
    });
  }

  // Delete workflow by API
  function deleteWorkflow(workflowId: string) {
    fetch(`/api/workflow/delete/${workflowId}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
      },
    }).then((response) => {
      if (response.ok) {
        console.log("Delete Success", response.statusText);
        modalTitle.innerText = "üéâ Tida";
        modalContent.innerText = "Workflow deleted successfully";
        confirmBtn.classList.toggle("hidden", true);
        modal.showModal();
        loadPageData();
      } else {
        console.error("Failed to delete workflow", response.statusText);
        modalTitle.innerText = "‚ö†Ô∏è Error";
        modalContent.innerText =
          "Failed to delete workflow. Please try again later.";
        confirmBtn.classList.toggle("hidden", true);
        modal.showModal();
      }
    });
  }

  // Load page data
  async function loadPageData(page: number = 1) {
    try {
      const workflowsResponse = await fetchWorkflows(
        page,
        10,
        undefined,
        "yes",
      );
      updateUserWorkflowsTable(workflowsResponse);
      updatePagination(
        workflowsResponse.total,
        workflowsResponse.page,
        workflowsResponse.pageSize,
        loadPageData,
      );
      // Bind click event to each workflow's mangae buttons
      workflowTableBody.addEventListener("click", (event) => {
        const target = event.target as HTMLElement;
        const workflowId = target.dataset.workflowId;
        // click edit button action
        if (target.closest("button.edit")) {
          event.stopPropagation(); // Prevent the event from bubbling up to the document
          console.log("Clicked the edit button of", workflowId);
          editMetaForm.dataset.workflowId = workflowId as string;
          editModalTitle.innerText = "Edit Workflow Metadata";
          // Fill in metadata
          const editWorkflowName = document.getElementById(
            "editWorkflowName",
          ) as HTMLInputElement;
          const editWorkflowAuthor = document.getElementById(
            "editWorkflowAuthor",
          ) as HTMLInputElement;
          const editWorkflowAuthorLink = document.getElementById(
            "editWorkflowAuthorLink",
          ) as HTMLInputElement;
          const editWorkflowDescription = document.getElementById(
            "editWorkflowDescription",
          ) as HTMLTextAreaElement;
          const selectedTagsDiv = document.getElementById(
            "selectedTags",
          ) as HTMLDivElement;
          const selectedTags = JSON.parse(
            atob(target.dataset.workflowTags as string),
          ) as string;
          const selectedTagsObject = JSON.parse(selectedTags) as string[];
          // console.log("Tags>>>>", selectedTags, "type of tags>>>", typeof selectedTags, "selectedTagsObject>>>", selectedTagsObject, "type of selectedTagsObject>>>", typeof selectedTagsObject)
          editWorkflowName.value = target.dataset.workflowName as string;
          editWorkflowAuthor.value = target.dataset.workflowAuthor as string;
          editWorkflowAuthorLink.value = target.dataset
            .workflowSocialLink as string;
          editWorkflowDescription.value = target.dataset
            .workflowDescription as string;
          selectedTagsDiv.innerHTML = "";
          // Add tags to the selectedTagsDiv
          selectedTagsObject.forEach((tag) => {
            const tagElement = document.createElement("span");
            tagElement.classList.add("tag", "tag-sm");
            tagElement.textContent = tag;
            selectedTagsDiv.appendChild(tagElement);
          });
          // Set checked state for each tag
          const dropdownTags = document.getElementById(
            "dropdownTags",
          ) as HTMLDivElement;
          const checkboxes = dropdownTags.querySelectorAll(
            "input[type='checkbox']",
          ) as NodeListOf<HTMLInputElement>;
          checkboxes.forEach((checkbox) => {
            const tagName = checkbox.value;
            if (selectedTagsObject.includes(tagName)) {
              checkbox.checked = true;
            }
          });
          // Show the edit modal
          updateConfirmBtn.classList.toggle("hidden", true);
          editModalConfirmBtn.classList.toggle("hidden", false);
          editMetaForm.classList.toggle("hidden", false);
          updateForm.classList.toggle("hidden", true);
          updateForm.classList.toggle("grid", false);
          editModal.showModal();
        }
        // click update button action
        if (target.closest("button.update")) {
          event.stopPropagation(); // Prevent the event from bubbling up to the document
          const workflowVer = target.dataset.workflowVer;
          const updateVersionInput = document.getElementById(
            "updateVersionInput",
          ) as HTMLInputElement;
          const updateWorkflowName = document.getElementById("updateWorkflowName") as HTMLInputElement;
          console.log("Clicked the update button of", workflowId, workflowVer);
          // updateForm.dataset.workflowId = workflowId as string;
          updateWorkflowName.value = target.dataset.workflowName as string;
          const expectVersion = Number(workflowVer) + 0.1;
          updateVersionInput.value = String(expectVersion);
          updateVersionInput.placeholder = String(expectVersion);
          const editModalUpdateNote = document.getElementById(
            "editModalUpdateNote",
          ) as HTMLParagraphElement;
          editModalUpdateNote.innerHTML = `‚ö†Ô∏è Note: Currently the latest version of this workflow is <span style="font-weight: bold;">${workflowVer}</span>, the updated version must be bigger than it. Recommended: <span style="font-weight: bold;">${expectVersion}</span>.`;
          editModalTitle.innerText = "Update Workflow Version";
          editModalConfirmBtn.classList.toggle("hidden", true);
          updateConfirmBtn.classList.toggle("hidden", false);
          editMetaForm.classList.toggle("hidden", true);
          updateForm.classList.toggle("hidden", false);
          updateForm.classList.toggle("grid", true);
          reactFlowPreview.classList.toggle("hidden", false);
          editModal.showModal();
        }
        // click delete button action
        if (target.closest("button.delete")) {
          event.stopPropagation(); // Prevent the event from bubbling up to the document
          console.log("Clicked the delete button of", workflowId);
          modalTitle.innerText = "ü§î Delect?";
          modalContent.innerHTML = `Confirm to delete this workflow: <span class="font-bold">${target.dataset.workflowName}</span> and all its version records?`;
          confirmBtn.textContent = "Delete";
          confirmBtn.classList.toggle("btn-error", true);
          confirmBtn.classList.toggle("hidden", false);
          confirmBtn.addEventListener("click", () =>
            deleteWorkflow(workflowId as string),
          );
          modal.showModal();
        }
      });
    } catch (error) {
      if (error instanceof JWTError) {
        modalTitle.innerText = "üòÆ Opps...";
        modalContent.innerText = "Your login has expired, please login again!";
        const confirmBtn = document.getElementById(
          "confirmBtn",
        ) as HTMLButtonElement;
        confirmBtn.textContent = "Login again";
        confirmBtn.classList.add("btn-error");
        confirmBtn.classList.remove("hidden");
        confirmBtn.setAttribute(
          "onclick",
          "window.location.href='/api/login/github'",
        );
        modal.showModal();
      } else {
        console.error("Error loading page data:", error);
        modalTitle.innerText = "‚ö†Ô∏è Error";
        modalContent.innerText =
          "Failed to fetch workflows. Please check your connection and try again.";
        modal.showModal();
      }
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    loadPageData(1);
  });
</script>
