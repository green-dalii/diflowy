---
import { changeLanguage, t } from "i18next";
import { localizePath } from "astro-i18next";
import MainLayout from "../../layouts/MainLayout.astro";
import SectionTitle from "../../components/ui/SectionTitle.astro";
import Section from "../../components/sections/Section.astro";
import WorkspaceEditModal from "../../components/ui/WorkspaceEditModal.astro";
import Breadcrumbs from "../../components/ui/Breadcrumbs.astro";
import "../../styles/globals.css";

changeLanguage("en");

const description = t("user.description");
const skeletonCount = 1;
const urlList = Astro.url.pathname.split("/").filter(Boolean);
---

<MainLayout
  title={t("site.workspace")}
  description={t("site.description")}
>
  <Breadcrumbs urlList={urlList} />
  <div class="mt-20">
    <Section>
      <SectionTitle sectionTitle={t("user.title")} description={description} />
      <div class="sm:grid sm:grid-cols-6 mt-40">
        <div id="not-login" class="sm:col-start-3 sm:col-span-2 text-center">
          <p class="text-sm">
            {t("user.before")}
          </p>
          <a id="login-link" href="/login"
            ><button class="btn-primary w-full py-2 my-10" id="login"
              >{t("user.loginbtn")}</button
            >
          </a>
        </div>
      </div>
      <div id="protected-content" style="display: none;">
        <div class="drawer lg:drawer-open">
          <input id="my-drawer-2" type="checkbox" class="drawer-toggle" />
          <div class="drawer-content flex flex-col items-start justify-start">
            <!-- Workspace Quota -->
            <div class="sm:pl-8 w-full grid grid-cols-1 sm:grid-cols-3 gap-2 items-center">
              <div class="col-span-full pb-6">
                <h3 class="font-bold">{t("user.workspaceinfo")}</h3>
              </div>
              <div class="text-sm col-span-full sm:col-span-2">
                <span class="font-medium mr-2">{t("user.plannow")}:</span>
                <span id="plan" class="tag">Loading...</span>
              </div>
              <div class="pb-6 sm:pb-0 col-span-full sm:col-span-1">
                <button class="btn-primary w-full sm:w-auto py-2 text-sm" id="upgrade">{t("user.upgrade")}</button>
              </div>
              <div class="text-sm col-span-full sm:col-span-1">
                <span class="font-medium mr-2">{t("user.workspacequota")}:</span>
              </div>
              <div class="col-span-2 sm:col-span-1">
                <progress id="workspacequata" class="progress progress-primary w-full" value="0" max="100"></progress>
              </div>
              <div class="text-sm col-span-1 sm:col-span-1">
                <span id="workspacequataVal">-</span> / <span id="workspacequataMaxVal">-</span>
              </div>
              <div class="text-sm col-span-full sm:col-span-1">
                <span class="font-medium mr-2">{t("user.memberquota")}:</span>
              </div>
              <div class="col-span-2 sm:col-span-1">
                <progress id="memberquata" class="progress progress-primary w-full" value="0" max="100"></progress>
              </div>
              <div class="text-sm col-span-1 sm:col-span-1">
                <span id="memberquataVal">-</span> / <span id="memberquataMaxVal">-</span>
              </div>
              <div class="divider col-span-full"></div>
              <!-- Workspace List -->
              <div class="text-sm col-span-2">
                <span class="font-medium mr-2">{t("user.joinedworkspace")}</span>
              </div>
              <div class="pb-6 sm:pb-0 col-span-1">
                <button class="btn-primary w-full sm:w-auto py-2 text-sm" id="createWokspaceBtn">{t("user.createbtn")}</button>
              </div>
              <table class="table table-fixed w-full col-span-full">
                <thead>
                  <tr>
                    <th class="text-wrap text-xs sm:table-cell sm:w-6/12">{t("user.workspacename")}</th>
                    <th class="text-wrap text-xs w-3/12 sm:w-2/12">{t("user.isowner")}</th>
                    <th class="text-wrap text-xs sm:table-cell sm:w-2/12">{t("user.management")}</th>
                    <th class="text-wrap text-xs w-3/12 sm:w-2/12">{t("user.dissolveworkspace")}</th>
                  </tr>
                </thead>
                <tbody id="workspaceTable">
                  <!-- Workspace rows will be dynamically replaced here -->
                  {
                    new Array(skeletonCount).fill(null).map((_) => (
                      <tr>
                        <td class="text-xs sm:table-cell sm:w-6/12">Loading...</td>
                        <td class="text-xs sm:2/12">-</td>
                        <td class="text-xs sm:table-cell sm:w-2/12">-</td>
                        <td class="text-xs sm:w-2/12">-</td>
                      </tr>
                    ))
                  }
                </tbody>
              </table>
            </div>
          </div>
          <div class="drawer-side sm:h-[70dvh]">
            <label for="my-drawer-2" aria-label="close sidebar" class="drawer-overlay"></label>
            <ul class="menu bg-base-200 text-base-content min-h-full w-80 p-4">
              <!-- Sidebar content here -->
              <li><a href={localizePath("/user")}>{t("user.accountinfo")}</a></li>
              <li><a href={localizePath("/user/workspace")}>{t("user.workspaceinfo")}</a></li>
              <li><a href={localizePath("/user/host")}>{t("user.hostedworkflow")}</a></li>
            </ul>
          </div>
        </div>
      </div>
      <WorkspaceEditModal />
    </Section>
  </div>
</MainLayout>

<script>
  import type { GetWorkspacesResponse, JoinedWorkspace, WorkspaceResponse } from "../../utils/tools";
  import { fetchUserWorkspaces, JWTError, fetchSpecificWorkspace } from "../../utils/tools";

  // Get the modal element
  const modal = document.getElementById("modal") as HTMLDialogElement;
  const modalTitle = document.getElementById(
    "modalTitle",
  ) as HTMLHeadingElement;
  const modalContent = document.getElementById(
    "modalContent",
  ) as HTMLDivElement;
  const confirmBtn = document.getElementById("confirmBtn") as HTMLButtonElement;

  // Get Edit modal element
  const editModal = document.getElementById("editModal") as HTMLDialogElement;
  const editModalTitle = document.getElementById(
    "editModalTitle",
  ) as HTMLHeadingElement;
  const createConfirmBtn = document.getElementById("createConfirmBtn") as HTMLButtonElement; 
  const editConfirmBtn = document.getElementById("editConfirmBtn") as HTMLButtonElement;

  // Get User info elements
  const planElement = document.getElementById("plan") as HTMLSpanElement;
  const workspaceQuata = document.getElementById("workspacequata") as HTMLProgressElement;
  const memberQuata = document.getElementById("memberquata") as HTMLProgressElement;
  const workspaceQuataVal = document.getElementById("workspacequataVal") as HTMLSpanElement;
  const memberQuataVal = document.getElementById("memberquataVal") as HTMLSpanElement;
  const workspaceQuataMaxVal = document.getElementById("workspacequataMaxVal") as HTMLSpanElement;
  const memberQuataMaxVal = document.getElementById("memberquataMaxVal") as HTMLSpanElement;
  const createWokspaceBtn = document.getElementById("createWokspaceBtn") as HTMLButtonElement;

  // Get the edit name button and input field
  const editNameBtn = document.getElementById("editname") as HTMLButtonElement;
  const workspaceNameInput = document.getElementById("workspaceName") as HTMLInputElement;

  // Get workspace table
  const workspaceTable = document.getElementById("workspaceTable") as HTMLTableElement;

  // Get Member Container element
  const memberContainer = document.getElementById("memberContainer") as HTMLDivElement;
  // Get Members Table element
  const membersTable = document.getElementById("membersTable") as HTMLTableElement;
  // Get your role container
  const yourroleContainer = document.getElementById("yourroleContainer") as HTMLDivElement;
  const yourrole = document.getElementById("yourrole") as HTMLSpanElement;
  // Get invite member button
  const invitebtn = document.getElementById("invitebtn") as HTMLButtonElement;
  
  // Dissolve Workspace Function
  async function dissolveWorkspace(workspace_id: string, event: Event) {
    event.preventDefault();
    event.stopPropagation();
    // Show loading modal
    modalTitle.innerText = "⏳ Processing...";
    modalContent.innerText = "Dissolving Workspace...";
    confirmBtn.classList.toggle("hidden", true);
    modal.showModal();
    const url = new URL("/api/user/workspace/delete/" + workspace_id, window.location.origin);
    const response = await fetch(url.toString(), {
        method: "DELETE"
    });
    if (response.status == 401) {
        console.error("JWT Expired");
        throw new Error("JWT Expired");
    } else if (response.status === 404) {
        console.error("No workspace Found");
        throw new Error("Not Found");
    }
    else if (!response.ok) {
        console.error("Failed to delete workspace", response.statusText);
        throw new Error("Failed to delete workspace");
    } else {
      modalTitle.innerText = "🎉 Tida";
      modalContent.innerText = "Workspace has been dissolved successfully";
      confirmBtn.classList.toggle("hidden", true);
      modal.showModal();
    }
    getWorkspaceInfo()
    return;
  }
  // Function of getting user info
  async function getWorkspaceInfo() {
    try{
      const { user, workspacesObject } = await fetchUserWorkspaces() as GetWorkspacesResponse;
      console.log("User API Return Data>>>", user, "Workspaces API Return Data>>>", workspacesObject);
      planElement.textContent = user.plan_type;
      if (user.plan_type === "TEAM") {
        // Team plan
        workspaceQuata.max = 1;
        workspaceQuataMaxVal.textContent = "1";
        workspaceQuata.value = workspacesObject.managed.total || 0;
        workspaceQuataVal.textContent = String(workspacesObject.managed.total) || "0";
        memberQuata.max = 10;
        memberQuataMaxVal.textContent = "10";
        memberQuata.value = workspacesObject.joined.total || 0;
        memberQuataVal.textContent = String(workspacesObject.joined.total) || "0";
      } else if (user.plan_type === "ENTERPRISE") {
        // Enterprise plan
        workspaceQuata.max = 10;
        workspaceQuataMaxVal.textContent = "10";
        workspaceQuata.value = workspacesObject.managed.total || 0;
        workspaceQuataVal.textContent = String(workspacesObject.managed.total) || "0";
        memberQuata.max = 100;
        memberQuataMaxVal.textContent = "100";
        memberQuata.value = workspacesObject.joined.total || 0;
        memberQuataVal.textContent = String(workspacesObject.joined.total) || "0";
      } else {
        // Free plan
        workspaceQuata.max = 0;
        workspaceQuataMaxVal.textContent = "0";
        workspaceQuata.value = 0;
        workspaceQuataVal.textContent = "0";
        memberQuata.max = 0;
        memberQuataMaxVal.textContent = "0";
        memberQuata.value = 0;
        memberQuataVal.textContent = "0";
      }
      // if workspaces quata is full, disable create workspace button
      if (workspacesObject.managed.total >= workspaceQuata.max) {
        createWokspaceBtn.disabled = true;
        createWokspaceBtn.classList.toggle("btn-disabled", true);
        createWokspaceBtn.classList.toggle("btn", true);
      } else {
        createWokspaceBtn.disabled = false;
        createWokspaceBtn.classList.toggle("btn-disabled", false);
        createWokspaceBtn.classList.toggle("btn", false);
      }
      // Get joined workspace table
      workspaceTable.innerHTML = "";
      workspacesObject.joined.workspaces.forEach((workspaces: JoinedWorkspace) => {
        console.log("Workspaces>>>", workspaces);
        const row = document.createElement("tr");
        row.classList.add("hover");
        row.id = `${workspaces.id}`;
        row.innerHTML = `
          <td class="text-xs sm:table-cell sm:w-6/12">${workspaces.name}</td>
          <td class="text-xs sm:2/12">${workspaces.owner_id === user.id ? "✅" : "-"}</td>
          <td class="text-xs sm:table-cell sm:w-2/12" data-workspace-id="${workspaces.id}">
            <button class="manage btn btn-sm btn-outline w-full" id="manageworkspace" data-workspace-id="${workspaces.id}">⚙️</button>
          </td>
          <td class="text-xs sm:w-2/12" data-workspace-id="${workspaces.id}" data-workspace-name="${workspaces.name}">
            ${workspaces.owner_id == user.id ? `<button class="dissolve btn btn-sm btn-outline btn-error w-full" id="dissolveworkspace" data-workspace-id="${workspaces.id}" data-workspace-name="${workspaces.name}">✕</button>` : "-"}
          </td>
        `;
        workspaceTable.appendChild(row);
      });
      // Add event listener to manage workspace button
      workspaceTable.addEventListener("click", async (event: Event) => {
        event.preventDefault();
        event.stopPropagation();
        const target = event.target as HTMLElement;
        const manageButton = target.closest("button.manage") as HTMLButtonElement;
        const dissolveButton = target.closest("button.dissolve") as HTMLButtonElement;
        // Check if the clicked element is a manage workspace button
        if (manageButton) {
          event.preventDefault();
          event.stopPropagation();
          try {
            workspaceNameInput.value = "Loading";
            workspaceNameInput.disabled = true;
            yourrole.innerText = "Loading";
            membersTable.innerHTML = `<tr>
                      <td class="text-xs sm:table-cell sm:w-6/12">Loading...</td>
                      <td class="text-xs sm:3/12">-</td>
                      <td class="text-xs sm:table-cell sm:w-3/12">-</td>
                    </tr>`;
            const workspaceId = manageButton.dataset.workspaceId;
            console.log("Manage workspace button clicked for workspace ID:", workspaceId);
            editModalTitle.innerText = "Manage Workspace";
            memberContainer.classList.toggle("hidden", false);
            invitebtn.classList.toggle("hidden", false);
            editConfirmBtn.classList.toggle("hidden", false);
            createConfirmBtn.classList.toggle("hidden", true);
            yourroleContainer.classList.toggle("hidden", false);
            editModal.showModal();
            // load workspace info from api
            const specificWorkspaceData: WorkspaceResponse = await fetchSpecificWorkspace(workspaceId as string);
            console.log("Specific workspace data>>>", specificWorkspaceData);
            workspaceNameInput.value = specificWorkspaceData.name;
            workspaceNameInput.disabled = false;
            yourrole.innerText = specificWorkspaceData.owner_id == user.id? "Owner" : "Member";
            // load member table
            membersTable.innerHTML = "";
            specificWorkspaceData.members.forEach((member) => {
              const row = document.createElement("tr");
              row.classList.add("hover");
              row.id = `${member.id}`;
              row.innerHTML = `
                <td class="text-xs sm:table-cell sm:w-6/12">${member.username}</td>
                <td class="text-xs sm:2/12">${member.role}</td>
                <td class="text-xs sm:w-2/12">
                  ${member.role === "OWNER"? `<button class="btn btn-sm btn-error btn-outline" id="dissolvemember" data-member-id="${member.id}">✕</button>` : "-"}
              `;
              membersTable.appendChild(row);
            });
          } catch (error) {
            if ((error as Error).message === "JWT Expired") {
              sessionStorage.removeItem("username");
              modalTitle.innerText = "😮 Oops...";
              modalContent.innerText = "Your login has expired, please login again!";
              const confirmBtn = document.getElementById(
                "confirmBtn",
              ) as HTMLButtonElement;
              confirmBtn.textContent = "Login again";
              confirmBtn.classList.toggle("btn-error", true);
              confirmBtn.classList.toggle("hidden", false);
              confirmBtn.addEventListener("click", (event: Event) => {
                event.preventDefault();
                window.location.href = "/login?redirect=" + encodeURIComponent(window.location.pathname + window.location.search);
              });
              modal.showModal();
            } else {
              console.error("Error loading workspace data:", error);
              modalTitle.innerText = "⚠️ Error";
              confirmBtn.classList.toggle("hidden", true);
              modalContent.innerText =
                "Failed to fetch workspace data. Please Login again or check your connection.";
              modal.showModal();
            }
          }
        } else if (dissolveButton) {
          // Check if the clicked element is a dissolve workspace button
          event.preventDefault();
          event.stopPropagation();
          try {
            const workspaceId = dissolveButton.dataset.workspaceId;
            const workspaceName = dissolveButton.dataset.workspaceName;
            modalTitle.innerText = "🤔 Dissolve Workspace";
            modalContent.innerText = "Are you sure you want to dissolve this workspace: " + workspaceName + "?";
            confirmBtn.classList.toggle("hidden", false);
            confirmBtn.textContent = "Delete";
            confirmBtn.classList.toggle("btn-error", true);
            confirmBtn.removeEventListener("click", (event: Event) => {
              dissolveWorkspace(workspaceId as string, event)
            });
            confirmBtn.addEventListener("click", (event: Event) => {
              dissolveWorkspace(workspaceId as string, event)
            });
            modal.showModal();
          } catch (error) {
            if ((error as Error).message === "JWT Expired") {
              sessionStorage.removeItem("username");
              modalTitle.innerText = "😮 Oops...";
              modalContent.innerText = "Your login has expired, please login again!";
              const confirmBtn = document.getElementById(
                "confirmBtn",
              ) as HTMLButtonElement;
              confirmBtn.textContent = "Login again";
              confirmBtn.classList.toggle("btn-error", true);
              confirmBtn.classList.toggle("hidden", false);
              confirmBtn.addEventListener("click", (event: Event) => {
                event.preventDefault();
                window.location.href = "/login?redirect=" + encodeURIComponent(window.location.pathname + window.location.search);
              });
              modal.showModal();
            } else {
              console.error("Error in Dissolve Workspace:", error);
              modalTitle.innerText = "⚠️ Error";
              confirmBtn.classList.toggle("hidden", true);
              modalContent.innerText =
                "Failed to dissolve workspace. Please try again or check your connection.";
              modal.showModal();
            }
          }
        }
      });
    } catch (error){
      if ((error as Error).message === "JWT Expired") {
        sessionStorage.removeItem("username");
        modalTitle.innerText = "😮 Oops...";
        modalContent.innerText = "Your login has expired, please login again!";
        const confirmBtn = document.getElementById(
          "confirmBtn",
        ) as HTMLButtonElement;
        confirmBtn.textContent = "Login again";
        confirmBtn.classList.toggle("btn-error", true);
        confirmBtn.classList.toggle("hidden", false);
        confirmBtn.addEventListener("click", (event: Event) => {
          event.preventDefault();
          window.location.href = "/login?redirect=" + encodeURIComponent(window.location.pathname + window.location.search);
        });
        modal.showModal();
      } else {
        console.error("Error loading workspace data:", error);
        modalTitle.innerText = "⚠️ Error";
        confirmBtn.classList.toggle("hidden", true);
        modalContent.innerText =
          "Failed to fetch workspace data. Please Login again or check your connection.";
        modal.showModal();
      }
    }
  }

  // Expose the loadworkspace function to the global scope
  (window as any).loadWorkspaceData = getWorkspaceInfo;

  document.addEventListener("DOMContentLoaded", () => {
    getWorkspaceInfo();
    // Add event listener to create workspace button
    createWokspaceBtn.addEventListener("click", (event) => {
      event.preventDefault();
      memberContainer.classList.toggle("hidden", true);
      invitebtn.classList.toggle("hidden", true);
      createConfirmBtn.classList.toggle("hidden", false);
      editConfirmBtn.classList.toggle("hidden", true);
      yourroleContainer.classList.toggle("hidden", true);
      editModal.showModal();
    });
  });
</script>
