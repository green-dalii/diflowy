---
import { changeLanguage, t } from "i18next";
import { localizePath } from "astro-i18next";
import { Icon } from "astro-icon/components";
import MainLayout from "../../layouts/MainLayout.astro";
import SectionTitle from "../../components/ui/SectionTitle.astro";
import Section from "../../components/sections/Section.astro";
import EditModal from "../../components/ui/EditModal.astro";
import Breadcrumbs from "../../components/ui/Breadcrumbs.astro";
import "../../styles/globals.css";

changeLanguage("en");

const description = t("user.description");
const urlList = Astro.url.pathname.split("/").filter(Boolean);
---

<MainLayout
  title={t("site.joinworkspace")}
  description={t("site.description")}
>
  <Breadcrumbs urlList={urlList} />
  <div class="mt-20">
    <Section>
      <SectionTitle sectionTitle={t("user.title")} description={description} />
      <div class="sm:grid sm:grid-cols-6 mt-40">
        <div id="not-login" class="sm:col-start-3 sm:col-span-2 text-center">
          <p class="text-sm">
            {t("user.before")}
          </p>
          <a id="login-link" href="/login"
            ><button class="btn-primary w-full py-2 my-10" id="login"
              >{t("user.loginbtn")}</button
            >
          </a>
        </div>
      </div>
      <div id="protected-content" style="display: none;">
        <div class="w-full sm:w-80 mx-auto">
          <form id="login-form" class="flex flex-col gap-4">
            <div class="flex flex-col gap-2">
              <label for="email" class="text-sm font-medium"
                >{t("user.workspacetoken")}</label
              >
              <input
                type="text"
                id="workspacetoken"
                class="input input-bordered w-full"
                required
              />
            </div>
            <button
              type="submit"
              class="btn-primary w-full md:w-auto flex items-center gap-2 text-sm justify-center"
            >
              <Icon name="newMember" class="text-3xl" /><span
                >{t("user.joinbtn")}</span
              >
            </button>
          </form>
        </div>
      </div>
      <EditModal />
    </Section>
  </div>
</MainLayout>

<script>
  import { fetchUserDetails, JWTError } from "../../utils/tools";
  import type { GetUserDetailsResponse } from "../../utils/tools";

  // Get the modal element
  const modal = document.getElementById("modal") as HTMLDialogElement;
  const modalTitle = document.getElementById(
    "modalTitle",
  ) as HTMLHeadingElement;
  const modalContent = document.getElementById(
    "modalContent",
  ) as HTMLDivElement;
  const confirmBtn = document.getElementById("confirmBtn") as HTMLButtonElement;

  // Get User info elements
  const usernameElement = document.getElementById("username") as HTMLSpanElement;
  const planElement = document.getElementById("plan") as HTMLSpanElement;
  const planstartElement = document.getElementById("planstart") as HTMLSpanElement;
  const planexpireElement = document.getElementById("planexpire") as HTMLSpanElement;

  // Get notfree elements
  const notfree = document.querySelectorAll('.notfree');

  // Get the edit name button and input field
  const editNameBtn = document.getElementById("editname");
  const editNameInput = document.getElementById("editnameInput");

  // Function of getting user info
  async function getUserInfo() {
    try{
      const userInfo = await fetchUserDetails() as GetUserDetailsResponse;
      console.log("User API Return Data>>>", userInfo)
      usernameElement.textContent = userInfo.user.username;
      planElement.textContent = userInfo.user.plan_type;
      if(userInfo.user.plan_type === "FREE"){
        notfree.forEach(element => {
          element.classList.toggle("hidden", true);
        });
      } else {
        notfree.forEach(element => {
          element.classList.toggle("hidden", false);
        });
        planstartElement.textContent = userInfo.user.plan_started_at;
        planexpireElement.textContent = userInfo.user.plan_expired_at;
      }
    } catch (error){
      if ((error as Error).message === "JWT Expired") {
        sessionStorage.removeItem("username");
        modalTitle.innerText = "😮 Oops...";
        modalContent.innerText = "Your login has expired, please login again!";
        const confirmBtn = document.getElementById(
          "confirmBtn",
        ) as HTMLButtonElement;
        confirmBtn.textContent = "Login again";
        confirmBtn.classList.toggle("btn-error", true);
        confirmBtn.classList.toggle("hidden", false);
        confirmBtn.addEventListener("click", (event: Event) => {
          event.preventDefault();
          window.location.href = "/login?redirect=" + encodeURIComponent(window.location.pathname + window.location.search);
        });
        modal.showModal();
      } else {
        console.error("Error loading user data:", error);
        modalTitle.innerText = "⚠️ Error";
        confirmBtn.classList.toggle("hidden", true);
        modalContent.innerText =
          "Failed to fetch user data. Please Login again or check your connection.";
        modal.showModal();
      }
    }
  }


  document.addEventListener("DOMContentLoaded", () => {
    getUserInfo();
  });
</script>
