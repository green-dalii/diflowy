---
import WorkflowFileInput from "./WorkflowFileInput.astro"
---

<dialog id="editModal" class="modal modal-bottom sm:modal-middle">
  <div class="modal-box sm:w-11/12 sm:max-w-5xl">
    <h3 id="editModalTitle" class="text-lg font-bold"></h3>
    <div id="editModalContent" class="py-4 text-sm">
      <!-- Edit Metadata Form -->
      <div id="editMetaForm" class="grid grid-cols-1 sm:grid-cols-2 gap-2">
        <!-- Column 1 -->
        <div class="flex flex-col">
          <div class="form-control w-full">
            <div class="label">
              <span class="label-text">Workflow Name</span>
            </div>
            <input
              id="editWorkflowName"
              name="editWorkflowName"
              type="text"
              class="input input-bordered w-full"
            />
          </div>
          <!-- Dropdown Tags -->
          <div class="relative block text-left sm:col-span-full">
            <div>
              <button
                id="dropdownButton"
                class="btn-secondary w-full px-4 py-2"
                type="button"
              >
                Select Tags
              </button>
              <div
                id="dropdownTags"
                class="dropdown-menu hidden absolute z-10 mt-2 w-48 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
              >
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Productivity" /> Productivity
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Assistant" /> Assistant
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Creative" /> Creative
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Social Media" /> Social
                  Media
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input
                    type="checkbox"
                    class="mr-2"
                    value="Finance & Business"
                  /> Finance & Business
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input
                    type="checkbox"
                    class="mr-2"
                    value="Lifestyle & Health"
                  />
                  Lifestyle & Health
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Education" />
                  Education
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Entertainment" />
                  Entertainment
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Others" />
                  Others
                </label>
              </div>
            </div>
            <div id="selectedTags" class="selected-tags"></div>
          </div>
          <div class="form-control w-full">
            <div class="label">
              <span class="label-text">Author</span>
            </div>
            <input
              id="editWorkflowAuthor"
              name="editWorkflowAuthor"
              type="text"
              class="input input-bordered w-full"
            />
          </div>
          <div class="form-control w-full">
            <div class="label">
              <span class="label-text">Social Media / Contact Link</span>
            </div>
            <input
              id="editWorkflowAuthorLink"
              name="editWorkflowAuthorLink"
              type="text"
              class="input input-bordered w-full"
            />
          </div>
        </div>
        <!-- Column 2 -->
        <div class="form-control w-full">
          <div class="label">
            <span class="label-text">Description</span>
          </div>
          <textarea
            id="description"
            name="description"
            rows="10"
            class="textarea textarea-bordered w-full"></textarea>
        </div>
      </div>
      <!-- Update Version Form -->
      <div id="updateForm" class="hidden">
        <!-- WorkFlow Update File Entrance-->
        <div class="flex flex-col">
          <label
            for="dsl-file"
            class="block text-sm font-medium leading-6"
            >Update your Dify Workflow with new file</label
          >
          <WorkflowFileInput />
        </div>
        <!-- Version -->
        <div class="sm:col-span-full">
          <label for="version" class="block text-sm font-medium leading-6">Version Control</label>
          <div class="mt-2 flex rounded-md shadow-sm">
            <span class="inline-flex italic items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 dark:bg-[--darkbgoffset] text-gray-500 text-sm">
              V
            </span>
            <input
              type="number"
              step="0.1"
              min="0.1"
              name="version"
              id="version"
              value="1.0"
              class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-r-md border border-gray-300 sm:text-sm"
              placeholder="1.0"
            >
          </div>
          <p id="editModalUpdateNote" class="mt-1 text-xs leading-normal text-gray-400"></p>
        </div>
      </div>
    </div>
    <div class="modal-action">
      <form method="dialog">
        <!-- if there is a button in form, it will close the modal -->
        <button id="editConfirmBtn" class="hidden btn"></button>
        <button class="btn">Close</button>
      </form>
    </div>
  </div>
</dialog>

<script>
  const dropdownButton = document.getElementById("dropdownButton");
  const dropdownTags = document.getElementById("dropdownTags");
  const selectedTagsDiv = document.getElementById("selectedTags");

  if (dropdownButton && dropdownTags) {
    dropdownButton.addEventListener("click", function (event: Event) {
      event.stopPropagation();
      dropdownTags.classList.toggle("hidden");
    });

    document.addEventListener("click", function (event: Event) {
      const target = event.target as Node;
      if (target !== dropdownButton && !dropdownTags.contains(target)) {
        dropdownTags.classList.add("hidden");
      }
    });

    dropdownTags.addEventListener("change", function (event: Event) {
      const target = event.target as HTMLInputElement;
      if (target && target.type === "checkbox") {
        updateSelectedTags();
      }
    });

    function updateSelectedTags() {
      if (selectedTagsDiv && dropdownTags) {
        selectedTagsDiv.innerHTML = "";
        const checkboxes = dropdownTags.querySelectorAll(
          "input[type='checkbox']:checked",
        ) as NodeListOf<HTMLInputElement>;
        checkboxes.forEach((checkbox) => {
          const tagValue = checkbox.value;
          const tagElement = document.createElement("span");
          tagElement.classList.add("tag");
          tagElement.classList.add("text-sm");
          tagElement.textContent = tagValue;
          selectedTagsDiv.appendChild(tagElement);
        });
      }
    }
  } else {
    console.error(
      "Element with id 'dropdownButton' or 'dropdownMenu' not found.",
    );
  }
</script>
<script>
  // Process YAML ReactFlow Data
  // import { parseYamlToReactFlow, paresYamlToJSON } from "../flow/yamlParser.ts";
  // import * as emoji from "node-emoji";
  const dslfile = document.getElementById("dsl-file") as HTMLInputElement;
  const uploadContainer = document.getElementById(
    "upload-container",
  ) as HTMLElement;

  // Get the modal element
  const modal = document.getElementById("modal") as HTMLDialogElement;
  const modalTitle = document.getElementById(
    "modalTitle",
  ) as HTMLHeadingElement;
  const modalContent = document.getElementById(
    "modalContent",
  ) as HTMLDivElement;

  // Function to handle file upload
  function handleFile(event: Event | DragEvent) {
    let file: File | undefined;
    if ("dataTransfer" in event) {
      // Drag and drop event
      file = event.dataTransfer?.files[0];
    } else if ("target" in event) {
      // File input event
      const target = event.target as HTMLInputElement;
      file = target.files?.[0];
    }

    if (file) {
      // const workflow_name = document.getElementById(
      //   "workflowname",
      // ) as HTMLInputElement;
      // const description = document.getElementById(
      //   "description",
      // ) as HTMLTextAreaElement;
      // const workflow_icon = document.getElementById(
      //   "workflowIcon",
      // ) as HTMLInputElement;
      const fileIndicator = document.getElementById("fileIndicator") as HTMLInputElement;
      fileIndicator.innerHTML = `Selected File: <br>${file.name}`
      // const reader = new FileReader();
      // reader.onload = function (e) {
      //   const target = e.target as FileReader;
      //   const yamlContent = target.result as string;
      //   try {
      //     const yamlData = paresYamlToJSON(yamlContent);
      //     // workflow_name.value = yamlData.app.name;
      //     // description.value = yamlData.app.description;
      //     // workflow_icon.innerText =
      //     //   (emoji.get(yamlData.app.icon) as string) || "😃";
      //     // console.log("yamlData loaded");
      //     const { nodes, edges } = parseYamlToReactFlow(yamlContent);
      //     // Update the ReactFlow component
      //     if (typeof (window as any).updateReactFlow === "function") {
      //       (window as any).updateReactFlow(nodes, edges);
      //     } else {
      //       console.error("updateReactFlow function not found");
      //     }
      //   } catch (error) {
      //     console.error("Error parsing YAML file:", error);
      //     // alert(
      //     //   "Unsupported file format. Please upload a valid Dify DSL file.",
      //     // );
      //     modalTitle.innerText = "⚠️ Error";
      //     modalContent.innerText =
      //       "Unsupported file format. Please upload a valid Dify DSL file.";
      //     modal.showModal();
      //     dslfile.value = ""; // Clear the file input field
      //     workflow_name.value = "";
      //     description.value = "";
      //   }
      // };
      // reader.readAsText(file);
    }
  }

  // Event listener for file input
  if (dslfile) {
    dslfile.addEventListener("change", function (event) {
      if (event.target) {
        handleFile(event);
      }
    });
  }

  // Add drag and drop event listeners
  uploadContainer.addEventListener("dragover", (e) => {
    e.preventDefault();
    e.stopPropagation();
    uploadContainer.classList.add("bg-gray-100");
  });

  uploadContainer.addEventListener("dragleave", (e) => {
    e.preventDefault();
    e.stopPropagation();
    uploadContainer.classList.remove("bg-gray-100");
  });

  uploadContainer.addEventListener("drop", (e: DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    uploadContainer.classList.remove("bg-gray-100");
    const dragEvent = e as DragEvent;
    if (dragEvent.dataTransfer && dragEvent.dataTransfer.files.length > 0) {
      const file = dragEvent.dataTransfer.files[0];
      if (file.name.endsWith(".yml") || file.name.endsWith(".yaml")) {
        handleFile(e);
      } else {
        // alert("Please upload a Dify DSL file.");
        modalTitle.innerText = "⚠️ Error";
        modalContent.innerText =
          "Unsupported file format. Please upload a valid Dify DSL file.";
        modal.showModal();
      }
    }
  });
</script>