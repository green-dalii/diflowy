---
import WorkflowFileInput from "./WorkflowFileInput.astro";
import Tags from "./Tags.astro";
import ReactFlowPreview from "../flow/ReactFlowPreview";
---

<dialog id="editModal" class="modal modal-bottom sm:modal-middle">
  <div class="modal-box sm:w-11/12 sm:max-w-5xl">
    <h3 id="editModalTitle" class="text-lg font-bold"></h3>
    <div id="editModalContent" class="py-4 text-sm">
      <!-- Edit Metadata Form -->
      <div id="editMetaForm" class="grid grid-cols-1 sm:grid-cols-2 gap-2">
        <!-- Column 1 -->
        <div class="flex flex-col gap-2">
          <div class="form-control w-full">
            <div class="label">
              <span class="label-text">Workflow Name</span>
            </div>
            <input
              id="editWorkflowName"
              name="editWorkflowName"
              type="text"
              class="input input-bordered w-full"
            />
          </div>
          <!-- Dropdown Tags -->
          <Tags />
          <div class="form-control w-full">
            <div class="label">
              <span class="label-text">Author</span>
            </div>
            <input
              id="editWorkflowAuthor"
              name="editWorkflowAuthor"
              type="text"
              class="input input-bordered w-full"
            />
          </div>
          <div class="form-control w-full">
            <div class="label">
              <span class="label-text">Social Media / Contact Link</span>
            </div>
            <input
              id="editWorkflowAuthorLink"
              name="editWorkflowAuthorLink"
              type="text"
              class="input input-bordered w-full"
            />
          </div>
        </div>
        <!-- Column 2 -->
        <div class="form-control w-full">
          <div class="label">
            <span class="label-text">Description</span>
          </div>
          <textarea
            id="editWorkflowDescription"
            name="editWorkflowDescription"
            rows="10"
            class="textarea textarea-bordered w-full"></textarea>
        </div>
      </div>
      <!-- Update Version Form -->
      <div id="updateForm" class="hidden grid-cols-1 sm:grid-cols-2 gap-4">
        <!-- WorkFlow Update File Entrance-->
        <div class="col-span-full">
          <WorkflowFileInput />
        </div>
        <!-- <label
          for="dsl-file"
          class="col-span-1 text-sm font-medium leading-6"
          >Update your Dify Workflow with new file
        </label> -->
        <!-- Version -->
        <label for="version" class="col-span-full text-sm font-medium leading-6">Update Version</label>
        <div class="col-span-1 mt-2 flex rounded-md shadow-sm">
          <span class="inline-flex italic items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 dark:bg-[--darkbgoffset] text-gray-500 text-sm">
            V
          </span>
          <input
            type="number"
            step="0.1"
            min="0.1"
            name="updateVersion"
            id="updateVersionInput"
            value="1.0"
            class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-r-md border border-gray-300 sm:text-sm"
            placeholder="1.0"
          >
        </div>
        <p id="editModalUpdateNote" class="col-span-1 mt-1 text-xs leading-normal text-gray-400"></p>
        <div class="col-span-full h-[400px]">
          <ReactFlowPreview />
        </div>
      </div>
    </div>
    <div class="modal-action">
      <form method="dialog">
        <!-- if there is a button in form, it will close the modal -->
        <button id="editConfirmBtn" class="hidden btn"></button>
        <button class="btn">Close</button>
      </form>
    </div>
  </div>
</dialog>

<script>
  // Process YAML ReactFlow Data
  import { parseYamlToReactFlow, paresYamlToJSON } from "../flow/yamlParser.ts";
  // import * as emoji from "node-emoji";
  const dslfile = document.getElementById("dsl-file") as HTMLInputElement;
  const uploadContainer = document.getElementById(
    "upload-container",
  ) as HTMLElement;

  // Get the modal element
  const modal = document.getElementById("modal") as HTMLDialogElement;
  const modalTitle = document.getElementById(
    "modalTitle",
  ) as HTMLHeadingElement;
  const modalContent = document.getElementById(
    "modalContent",
  ) as HTMLDivElement;

  // Function to handle file upload
  function handleFile(event: Event | DragEvent) {
    let file: File | undefined;
    if ("dataTransfer" in event) {
      // Drag and drop event
      file = event.dataTransfer?.files[0];
    } else if ("target" in event) {
      // File input event
      const target = event.target as HTMLInputElement;
      file = target.files?.[0];
    }

    if (file) {
      const edit_workflow_name = document.getElementById(
        "editWorkflowname",
      ) as HTMLInputElement;
      const edit_description = document.getElementById(
        "editDescription",
      ) as HTMLTextAreaElement;
      // const workflow_icon = document.getElementById(
      //   "workflowIcon",
      // ) as HTMLInputElement;
      const fileIndicator = document.getElementById("fileIndicator") as HTMLInputElement;
      fileIndicator.innerHTML = `Selected File: <br>${file.name}`
      const reader = new FileReader();
      reader.onload = function (e) {
        const target = e.target as FileReader;
        const yamlContent = target.result as string;
        try {
          const yamlData = paresYamlToJSON(yamlContent);
          // workflow_name.value = yamlData.app.name;
          // description.value = yamlData.app.description;
          // workflow_icon.innerText =
          //   (emoji.get(yamlData.app.icon) as string) || "😃";
          // console.log("yamlData loaded");
          const { nodes, edges } = parseYamlToReactFlow(yamlContent);
          // Update the ReactFlow component
          if (typeof (window as any).updateReactFlow === "function") {
            (window as any).updateReactFlow(nodes, edges);
          } else {
            console.error("updateReactFlow function not found");
          }
        } catch (error) {
          console.error("Error parsing YAML file:", error);
          // alert(
          //   "Unsupported file format. Please upload a valid Dify DSL file.",
          // );
          modalTitle.innerText = "⚠️ Error";
          modalContent.innerText =
            "Unsupported file format. Please upload a valid Dify DSL file.";
          modal.showModal();
          dslfile.value = ""; // Clear the file input field
        }
      };
      reader.readAsText(file);
    }
  }

  // Event listener for file input
  if (dslfile) {
    dslfile.addEventListener("change", function (event) {
      if (event.target) {
        handleFile(event);
      }
    });
  }

  // // Add drag and drop event listeners
  // uploadContainer.addEventListener("dragover", (e) => {
  //   e.preventDefault();
  //   e.stopPropagation();
  //   uploadContainer.classList.add("bg-gray-100");
  // });

  // uploadContainer.addEventListener("dragleave", (e) => {
  //   e.preventDefault();
  //   e.stopPropagation();
  //   uploadContainer.classList.remove("bg-gray-100");
  // });

  uploadContainer.addEventListener("drop", (e: DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    uploadContainer.classList.remove("bg-gray-100");
    const dragEvent = e as DragEvent;
    if (dragEvent.dataTransfer && dragEvent.dataTransfer.files.length > 0) {
      const file = dragEvent.dataTransfer.files[0];
      if (file.name.endsWith(".yml") || file.name.endsWith(".yaml")) {
        handleFile(e);
      } else {
        // alert("Please upload a Dify DSL file.");
        modalTitle.innerText = "⚠️ Error";
        modalContent.innerText =
          "Unsupported file format. Please upload a valid Dify DSL file.";
        modal.showModal();
      }
    }
  });

  // Upload Edit Meta Data of Workflow Form
  const editMetaForm = document.getElementById("editMetaForm") as HTMLFormElement;
  const workflowId = editMetaForm.dataset.workflowId as string;
  async function handleSubmit(event: Event) {
    event.preventDefault();
    // Get form data
    const formData = new FormData(editMetaForm);
    const selectedTags = document.querySelectorAll(".tag");
    // Check if all required fields are filled
    if (
      !formData.get("workflowname") ||
      !formData.get("description") ||
      !formData.get("author-name") ||
      !formData.get("social-link") ||
      selectedTags.length === 0
    ) {
      // alert("Please fill out all required fields.");
      modalTitle.innerText = "😮 Opps";
      modalContent.innerText = "Please fill out all required fields.";
      modal.showModal();
      return;
    }
    // Add the selected tags to the form data
    const selectedTagsTree = document.getElementById("selectedTags");
    const tags: string[] = [];
    selectedTags.forEach((tag) => {
      tags.push(tag.textContent as string);
    });
    formData.append("tags", JSON.stringify(tags));
    // console.log("FormData>>>", formData.get("tags"), formData.get("dsl-file"));
    // Send form data to the server
    try {
      const response = await fetch(`/api/workflow/edit/${workflowId}`, {
        method: "POST",
        body: formData,
      });
      if (response.ok) {
        console.log("Response>>>", response.json());
        // alert("Upload successful!");
        modalTitle.innerText = "🎉 Tada!";
        modalContent.innerText = "Upload successful!";
        modal.showModal();
        // Clear the form
        editMetaForm.reset();
        // Clear the selected tags
        selectedTagsTree!.innerHTML = "";
      } else if (response.status === 401) {
        // alert("Before you upload, please login first.");
        modalTitle.innerText = "😮 Opps...";
        modalContent.innerText = "Your login has expired, please login again!";
        const confirmBtn = document.getElementById("confirmBtn") as HTMLButtonElement;
        confirmBtn.textContent = "Login again";
        confirmBtn.classList.add("btn-error");
        confirmBtn.classList.remove("hidden");
        confirmBtn.setAttribute("onclick", "window.location.href='/api/login/github'");
        modal.showModal();
      } else {
        // alert(
        //   "An error occurred while uploading the file. Please try again or contact us with email: diflowy@greenerai.top",
        // );
        modalTitle.innerText = "😮 Opps...";
        modalContent.innerText = "An error occurred while uploading the file. Please try again or contact us with email: diflowy@greenerai.top";
        modal.showModal();
      }
    } catch (error) {
      console.error("Error uploading file:", error);
      // alert(
      //   "Your network is unreachable. Please check your internet connection and try again.",
      // );
      modalTitle.innerText = "😮 Opps...";
      modalContent.innerText = "Your network is unreachable. Please check your internet connection and try again.";
      modal.showModal();
    }
  }
  // Add event listener to the form
  editMetaForm.addEventListener("submit", handleSubmit);
</script>