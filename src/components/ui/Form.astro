---
import ReactFlowPreview from "../../components/flow/ReactFlowPreview";
---

<form id="uploadForm">
  <div class="sm:grid sm:grid-cols-6 sm:gap-4">
    <div class="sm:col-span-2 sm:col-start-1">
      <!-- Basic Info`` -->
      <div class="border-b border-gray-900/10 pb-24">
        <h2 class="text-xl font-semibold leading-7 text-gray-900">
          Workflow Information
        </h2>
        <p class="mt-1 text-sm leading-6 text-gray-600">
          This information will be displayed publicly so be careful what you
          share.
        </p>
        <!-- Basic info -->
        <div class="mt-10 grid grid-cols-1 space-y-5">
          <!-- WorkFlow File -->
          <div class="sm:col-span-full">
            <label
              for="dsl-file"
              class="block text-sm font-medium leading-6 text-gray-900"
              >Upload your Dify DSL file</label
            >
            <div
              id="upload-container"
              class="mt-2 flex justify-center rounded-lg border border-dashed border-gray-900/25 px-6 py-10"
            >
              <div id="upload-prompt" class="text-center">
                <svg
                  class="mx-auto h-12 w-12 text-gray-300"
                  width="13"
                  height="12"
                  viewBox="0 0 13 12"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                  class="w-6 h-6 text-[#f79009]"
                  data-icon="Route"
                  aria-hidden="true"
                  ><g id="route-sep"
                    ><path
                      id="Icon"
                      d="M6.08303 2.5H6.30023C7.82386 2.5 8.58567 2.5 8.87485 2.77364C9.12483 3.01018 9.23561 3.35864 9.16812 3.69611C9.09004 4.08651 8.46809 4.52643 7.22418 5.40627L5.19189 6.84373C3.94799 7.72357 3.32603 8.16349 3.24795 8.55389C3.18046 8.89136 3.29124 9.23982 3.54122 9.47636C3.8304 9.75 4.59221 9.75 6.11584 9.75H6.58303"
                      stroke="currentColor"
                      stroke-linecap="round"
                      stroke-linejoin="round"></path><path
                      id="Icon_2"
                      d="M2.83301 4C3.66143 4 4.33301 3.32843 4.33301 2.5C4.33301 1.67157 3.66143 1 2.83301 1C2.00458 1 1.33301 1.67157 1.33301 2.5C1.33301 3.32843 2.00458 4 2.83301 4Z"
                      fill="currentColor"></path><path
                      id="Icon_3"
                      d="M9.83301 11C10.6614 11 11.333 10.3284 11.333 9.5C11.333 8.67157 10.6614 8 9.83301 8C9.00458 8 8.33301 8.67157 8.33301 9.5C8.33301 10.3284 9.00458 11 9.83301 11Z"
                      fill="currentColor"></path></g
                  ></svg
                >
                <div class="mt-4 flex text-sm leading-6 text-gray-600">
                  <label
                    for="dsl-file"
                    class="relative cursor-pointer rounded-md bg-white font-semibold text-[--dark] focus-within:outline-none focus-within:ring-2 focus-within:[--dark] focus-within:ring-offset-2 hover:text-[--color-blue]"
                  >
                    <span>Click here to Upload</span>
                    <input
                      id="dsl-file"
                      name="dsl-file"
                      type="file"
                      class="sr-only"
                      accept=".yml,.yaml,application/yaml"
                    />
                  </label>
                  <p class="pl-1">or drag and drop</p>
                </div>
                <p class="text-xs leading-5 text-gray-600">
                  Requirement: Dify DSL Yaml File
                </p>
              </div>
              <!-- <div id="reactflow-preview" class="absolute inset-0 hidden">
              <ReactFlowPreview client:load/>
            </div> -->
            </div>
          </div>
          <!-- Name -->
          <div class="sm:col-span-full">
            <label
              for="workflowname"
              class="block text-sm font-medium leading-6 text-gray-900"
              >Workflow Name</label
            >
            <div class="mt-2">
              <div
                class="flex items-center"
              >
                <div class="flex-none px-2" id="workflowIcon">
                  ðŸ«£
                </div>
                <input
                  type="text"
                  name="workflowname"
                  id="workflowname"
                  autocomplete="workflowname"
                  class="block flex-1 border-0 bg-transparent py-1.5 pl-4 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6 rounded-md shadow-sm ring-1 ring-inset ring-[--blue] focus-within:ring-2 focus-within:ring-inset focus-within:[--dark]"
                  placeholder="Fill Your Workflow Name"
                />
              </div>
            </div>
          </div>
          <!-- Description -->
          <div class="sm:col-span-full">
            <label
              for="description"
              class="block text-sm font-medium leading-6 text-gray-900"
              >Description</label
            >
            <div class="mt-2">
              <textarea
                id="description"
                name="description"
                rows="10"
                class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                placeholder="Write a few sentences about your Workflow.
Such as:
    - Introduction
    - Ability
    - Usage
    - Restrictions
    - Dify Version Requirement
    - Copyright 
    - etc."
              ></textarea>
            </div>
          </div>
          <!-- Dropdown Tags -->
          <div class="relative block text-left sm:col-span-full">
            <div>
              <button
                id="dropdownButton"
                class="btn-secondary w-full px-4 py-2"
                type="button"
              >
                Select Tags
              </button>
              <div
                id="dropdownTags"
                class="dropdown-menu hidden absolute z-10 mt-2 w-48 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
              >
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Productivity" /> Productivity
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Assisent" /> Assisent
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Creative" /> Creative
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Social" /> Social
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input
                    type="checkbox"
                    class="mr-2"
                    value="Business"
                  /> Business
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input
                    type="checkbox"
                    class="mr-2"
                    value="Lifestyle"
                  />
                  Lifestyle
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="NLP" />
                  NLP
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Education" />
                  Education
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input
                    type="checkbox"
                    class="mr-2"
                    value="Health & Medical"
                  />
                  Health & Medical
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Finance" />
                  Finance
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Entertainment" />
                  Entertainment
                </label>
                <label
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <input type="checkbox" class="mr-2" value="Others" />
                  Others
                </label>
              </div>
            </div>
            <div id="selectedTags" class="selected-tags"></div>
          </div>
        </div>
      </div>
      <!-- Author Info -->
      <div class="border-b border-gray-900/10 pb-24">
        <h2 class="text-base font-semibold leading-7 text-gray-900">
          Author Information
        </h2>
        <p class="mt-1 text-sm leading-6 text-gray-600">
          You can fill your information so users can contact with you.
        </p>

        <div class="mt-10 grid grid-cols-1">
          <div class="sm:col-span-full">
            <label
              for="author-name"
              class="block text-sm font-medium leading-6 text-gray-900"
              >Author name</label
            >
            <div class="mt-2">
              <input
                type="text"
                name="author-name"
                id="author-name"
                class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
              />
            </div>
          </div>

          <div class="sm:col-span-full">
            <label
              for="social-link"
              class="block text-sm font-medium leading-6 text-gray-900"
              >Social Media / Contact Link</label
            >
            <div class="mt-2">
              <input
                id="social-link"
                name="social-link"
                class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
              />
            </div>
            <p class="mt-1 text-sm leading-6 text-gray-600">
              Such as Email, Twitter, Discord, Telegram, Website etc.
            </p>
          </div>
        </div>
      </div>
      <!-- Notifications -->
      <div class="border-b border-gray-900/10 pb-24">
        <h2 class="text-base font-semibold leading-7 text-gray-900">
          Notifications
        </h2>
        <p class="mt-1 text-sm leading-6 text-gray-600">
          Please complete the above information in as much detail as possible.
        </p>
      </div>
      <!-- Button -->
      <div class="mt-6 flex items-center justify-end gap-x-6">
        <button
          type="button"
          class="text-sm font-semibold leading-6 text-gray-900">Cancel</button
        >
        <button
          type="submit"
          class="btn-tertiary px-3 py-2 text-sm font-semibold focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2"
          >Upload</button
        >
      </div>
    </div>
    <div id="reactflow-preview" class="sm:col-span-4 sm:col-start-3">
      <h2 class="text-xl font-semibold leading-7 text-gray-900">
        Simplified Structure Preview
      </h2>
      <p class="mt-1 text-sm leading-6 text-gray-600">
        When you upload the Dify DSL file, the workflow simplified structure
        will be shown below.
      </p>
      <div class="w-full h-[500px]">
        <ReactFlowPreview client:load />
      </div>
    </div>
  </div>
</form>

<script>
  const dropdownButton = document.getElementById("dropdownButton");
  const dropdownTags = document.getElementById("dropdownTags");
  const selectedTagsDiv = document.getElementById("selectedTags");

  if (dropdownButton && dropdownTags) {
    dropdownButton.addEventListener("click", function (event: Event) {
      event.stopPropagation();
      dropdownTags.classList.toggle("hidden");
    });

    document.addEventListener("click", function (event: Event) {
      const target = event.target as Node;
      if (target !== dropdownButton && !dropdownTags.contains(target)) {
        dropdownTags.classList.add("hidden");
      }
    });

    dropdownTags.addEventListener("change", function (event: Event) {
      const target = event.target as HTMLInputElement;
      if (target && target.type === "checkbox") {
        updateSelectedTags();
      }
    });

    function updateSelectedTags() {
      if (selectedTagsDiv && dropdownTags) {
        selectedTagsDiv.innerHTML = "";
        const checkboxes = dropdownTags.querySelectorAll(
          "input[type='checkbox']:checked",
        ) as NodeListOf<HTMLInputElement>;
        checkboxes.forEach((checkbox) => {
          const tagValue = checkbox.value;
          const tagElement = document.createElement("span");
          tagElement.classList.add("tag");
          tagElement.classList.add("text-sm");
          tagElement.textContent = tagValue;
          selectedTagsDiv.appendChild(tagElement);
        });
      }
    }
  } else {
    console.error(
      "Element with id 'dropdownButton' or 'dropdownMenu' not found.",
    );
  }
</script>
<script>
  /// <reference path="../../env.d.ts" />
  // Process YAML ReactFlow Data
  import { parseYamlToReactFlow, paresYamlToJSON } from "../flow/yamlParser.ts";
  import * as emoji from 'node-emoji'
  const dslfile = document.getElementById("dsl-file") as HTMLInputElement;
  const uploadContainer = document.getElementById(
    "upload-container",
  ) as HTMLElement;

  // Function to handle file upload
  function handleFile(event: Event | DragEvent) {
    let file: File | undefined;
    if ("dataTransfer" in event) {
      // Drag and drop event
      file = event.dataTransfer?.files[0];
    } else if ("target" in event) {
      // File input event
      const target = event.target as HTMLInputElement;
      file = target.files?.[0];
    }

    if (file) {
      const workflow_name = document.getElementById(
        "workflowname",
      ) as HTMLInputElement;
      const description = document.getElementById(
        "description",
      ) as HTMLTextAreaElement;
      const workflow_icon = document.getElementById("workflowIcon") as HTMLInputElement;
      const reader = new FileReader();
      reader.onload = function (e) {
        const target = e.target as FileReader;
        const yamlContent = target.result as string;
        try {
          const yamlData = paresYamlToJSON(yamlContent);
          workflow_name.value = yamlData.app.name;
          description.value = yamlData.app.description;
          workflow_icon.innerText = emoji.get(yamlData.app.icon) as string || "ðŸ˜ƒ";
          console.log("yamlData loaded");
          const { nodes, edges } = parseYamlToReactFlow(yamlContent);
          // Update the ReactFlow component
          if (typeof (window as any).updateReactFlow === "function") {
            (window as any).updateReactFlow(nodes, edges);
          } else {
            console.error("updateReactFlow function not found");
          }
        } catch (error) {
          console.error("Error parsing YAML file:", error);
          alert(
            "Unsupported file format. Please upload a valid Dify DSL file.",
          );
          dslfile.value = ""; // Clear the file input field
          workflow_name.value = "";
          description.value = "";
        }
      };
      reader.readAsText(file);
    }
  }

  // Event listener for file input
  if (dslfile) {
    dslfile.addEventListener("change", function (event) {
      if (event.target) {
        handleFile(event);
      }
    });
  }

  // Add drag and drop event listeners
  uploadContainer.addEventListener("dragover", (e) => {
    e.preventDefault();
    e.stopPropagation();
    uploadContainer.classList.add("bg-gray-100");
  });

  uploadContainer.addEventListener("dragleave", (e) => {
    e.preventDefault();
    e.stopPropagation();
    uploadContainer.classList.remove("bg-gray-100");
  });

  uploadContainer.addEventListener("drop", (e: DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    uploadContainer.classList.remove("bg-gray-100");
    const dragEvent = e as DragEvent;
    if (dragEvent.dataTransfer && dragEvent.dataTransfer.files.length > 0) {
      const file = dragEvent.dataTransfer.files[0];
      if (file.name.endsWith(".yml") || file.name.endsWith(".yaml")) {
        handleFile(e);
      } else {
        alert("Please upload a Dify DSL file.");
      }
    }
  });
</script>
<script>
  // Upload Form
  const form = document.getElementById("uploadForm") as HTMLFormElement;
  async function handleSubmit(event: Event) {
    event.preventDefault();
    // Get form data
    const formData = new FormData(form);
    // Check if all required fields are filled
    if (
      !formData.get("workflowname") ||
      !formData.get("description") ||
      !formData.get("dsl-file")
    ) {
      alert("Please fill out all required fields.");
      return;
    }
    // Add Icon to form data
    const workflow_icon = document.getElementById("workflowIcon") as HTMLInputElement;
    formData.append("icon", workflow_icon.innerText);
    // Add the selected tags to the form data
    const selectedTags = document.querySelectorAll(".tag");
    const selectedTagsTree = document.getElementById("selectedTags");
    const tags: string[] = [];
    selectedTags.forEach((tag) => {
      tags.push(tag.textContent as string);
    });
    formData.append("tags", JSON.stringify(tags));
    // console.log("FormData>>>", formData.get("tags"), formData.get("dsl-file"));
    // Send form data to the server
    try {
      const response = await fetch("/api/workflow/upload", {
        method: "POST",
        body: formData,
      });
      if (response.ok) {
        console.log("Response>>>", response.json());
        alert("Upload successful!");
        // Clear the form
        form.reset();
        // Clear the selected tags
        selectedTagsTree!.innerHTML = "";
      } else if (response.status === 401) { 
        alert("Before you upload, please login first.");
      } else {
        alert("An error occurred while uploading the file. Please try again or contact us with email: diflowy@greenerai.top");
      }
    } catch (error) {
      console.error("Error uploading file:", error);
      alert("Your network is unreachable. Please check your internet connection and try again.");
    }
  }
  // Add event listener to the form
  form.addEventListener("submit", handleSubmit);
</script>
