---
import ReactFlowPreview from "../../components/flow/ReactFlowPreview";
import WorkflowFileInput from "./WorkflowFileInput.astro";
import Tags from "./Tags.astro";
---

<form id="uploadForm">
  <div class="grid sm:grid-cols-6 sm:gap-4">
    <div class="sm:col-span-2 sm:col-start-1">
      <!-- Basic Info`` -->
      <div class="border-b border-gray-900/10 pb-12">
        <h2 class="text-xl font-semibold leading-7">
          Workflow Information
        </h2>
        <!-- Basic info -->
        <div class="grid grid-cols-1 gap-2">
          <!-- WorkFlow File -->
          <div class="sm:col-span-full">
            <label
              for="dsl-file"
              class="block text-sm font-medium leading-6"
              >Upload your Dify Workflow file</label
            >
            <WorkflowFileInput />
          </div>
          <!-- Name -->
          <div class="sm:col-span-full">
            <label
              for="workflowname"
              class="block text-sm font-medium leading-6"
              >Workflow Name</label
            >
            <div class="mt-2">
              <div class="flex items-center">
                <div class="flex-none px-2" id="workflowIcon">ü´£</div>
                <input
                  type="text"
                  name="workflowname"
                  id="workflowname"
                  autocomplete="workflowname"
                  class="input input-bordered w-full max-w-xs"
                  placeholder="Fill Your Workflow Name"
                />
              </div>
            </div>
          </div>
          <!-- Version -->
          <div class="sm:col-span-full">
            <label for="version" class="block text-sm font-medium leading-6">Version Control</label>
            <div class="mt-2 flex rounded-md shadow-sm">
              <span class="inline-flex italic items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 dark:bg-[--darkbgoffset] text-gray-500 text-sm">
                V
              </span>
              <input
                type="number"
                step="0.1"
                min="0.1"
                name="version"
                id="version"
                value="1.0"
                class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-r-md border border-gray-300 sm:text-sm"
                placeholder="1.0"
              >
            </div>
            <p class="mt-1 text-xs leading-normal text-gray-400">
              ‚ö†Ô∏è Note: Here is for uploading the first version of your workflow. We recommend that it be set to <span class="font-semibold">v1.0</span>.
              <br>If there are future updates to this workflow, you can go to the <a href="/user" class="link font-medium hover:text-dark">User Center</a> to update the newer version.
            </p>
          </div>
          <!-- Description -->
          <div class="sm:col-span-full">
            <label
              for="description"
              class="block text-sm font-medium leading-6"
              >Description</label
            >
            <div class="mt-2">
              <textarea
                id="description"
                name="description"
                rows="10"
                class="textarea textarea-bordered w-full"
                placeholder="Describe your workflow with a few key points, such as:
    - Introduction
    - Capabilities
    - Usage
    - Restrictions
    - Dify Version Requirement
    - Sponsorship 
    - Others"
              ></textarea>
            </div>
          </div>
          <!-- Dropdown Tags -->
          <Tags />
        </div>
      </div>
      <!-- Author Info -->
      <div class="border-b border-gray-900/10 pb-12">
        <div class="mt-5 grid grid-cols-1">
          <div class="sm:col-span-full">
            <label
              for="author-name"
              class="block text-sm font-medium leading-6"
              >Author name</label
            >
            <div class="mt-2">
              <input
                type="text"
                name="author-name"
                id="author-name"
                class="input input-bordered w-full"
              />
            </div>
          </div>
          <div class="mt-4 sm:col-span-full">
            <label
              for="social-link"
              class="block text-sm font-medium leading-6"
              >Social Media / Contact Link</label
            >
            <div class="mt-2">
              <input
                id="social-link"
                name="social-link"
                class="input input-bordered w-full"
              />
            </div>
            <p class="mt-1 text-xs leading-normal text-gray-400">
              Such as Email, Website, Twitter(ùïè), Facebook, WhatsApp, WeChat, etc. So others can contact with you.
            </p>
          </div>
        </div>
      </div>
      <!-- Notifications -->
      <div class="border-b border-gray-900/10 pb-4">
        <h2 class="text-base font-semibold leading-7">
          üîî Notifications
        </h2>
        <ul class="list-disc list-inside text-xs">
          <li class="leading-6 text-gray-600">
            Please fill out the above in detail for the convenience of others.
          </li>
          <li class="leading-6 text-gray-600">
            Please make sure there is no private information(API keys, Environment variables etc.) before uploading.
          </li>
        </ul>
      </div>
      <!-- Button -->
      <div class="mt-6 flex items-center justify-end gap-x-6">
        <button
          type="submit"
          class="btn-tertiary w-full px-3 py-2 text-sm font-semibold focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2"
          >Upload</button
        >
      </div>
    </div>
    <div id="reactflow-preview" class="mt-8 sm:mt-0 sm:col-span-4 sm:col-start-3">
      <h2 class="text-xl font-semibold leading-7">
        Workflow Preview
      </h2>
      <div class="w-full h-[500px] sm:h-[600px]">
        <ReactFlowPreview client:only="react" />
      </div>
      <div><small class="text-sm text-gray-400">* Above is for Preview Only. Any changes in preview area will not affect the file you upload.</small></div>
    </div>
  </div>
</form>

<script>
  /// <reference path="../../env.d.ts" />
  // Process YAML ReactFlow Data
  import { parseYamlToReactFlow, paresYamlToJSON } from "../flow/yamlParser.ts";
  import * as emoji from "node-emoji";
  const dslfile = document.getElementById("dsl-file") as HTMLInputElement;
  const uploadContainer = document.getElementById(
    "upload-container",
  ) as HTMLElement;

  // Get the modal element
  const modal = document.getElementById("modal") as HTMLDialogElement;
  const modalTitle = document.getElementById(
    "modalTitle",
  ) as HTMLHeadingElement;
  const modalContent = document.getElementById(
    "modalContent",
  ) as HTMLDivElement;

  // Function to handle file upload
  function handleFile(event: Event | DragEvent) {
    let file: File | undefined;
    if ("dataTransfer" in event) {
      // Drag and drop event
      file = event.dataTransfer?.files[0];
    } else if ("target" in event) {
      // File input event
      const target = event.target as HTMLInputElement;
      file = target.files?.[0];
    }

    if (file) {
      const workflow_name = document.getElementById(
        "workflowname",
      ) as HTMLInputElement;
      const description = document.getElementById(
        "description",
      ) as HTMLTextAreaElement;
      const workflow_icon = document.getElementById(
        "workflowIcon",
      ) as HTMLInputElement;
      const fileIndicator = document.getElementById("fileIndicator") as HTMLInputElement;
      fileIndicator.innerHTML = `Selected File: <br>${file.name}`
      const reader = new FileReader();
      reader.onload = function (e) {
        const target = e.target as FileReader;
        const yamlContent = target.result as string;
        try {
          const yamlData = paresYamlToJSON(yamlContent);
          workflow_name.value = yamlData.app.name;
          description.value = yamlData.app.description;
          workflow_icon.innerText =
            (emoji.get(yamlData.app.icon) as string) || "üòÉ";
          // console.log("yamlData loaded");
          const { nodes, edges } = parseYamlToReactFlow(yamlContent);
          // Update the ReactFlow component
          if (typeof (window as any).updateReactFlow === "function") {
            (window as any).updateReactFlow(nodes, edges);
          } else {
            console.error("updateReactFlow function not found");
          }
        } catch (error) {
          console.error("Error parsing YAML file:", error);
          // alert(
          //   "Unsupported file format. Please upload a valid Dify DSL file.",
          // );
          modalTitle.innerText = "‚ö†Ô∏è Error";
          modalContent.innerText =
            "Unsupported file format. Please upload a valid Dify DSL file.";
          modal.showModal();
          dslfile.value = ""; // Clear the file input field
          workflow_name.value = "";
          description.value = "";
        }
      };
      reader.readAsText(file);
    }
  }

  // Event listener for file input
  if (dslfile) {
    dslfile.addEventListener("change", function (event) {
      if (event.target) {
        handleFile(event);
      }
    });
  }

  uploadContainer.addEventListener("drop", (e: DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    uploadContainer.classList.remove("bg-gray-100");
    const dragEvent = e as DragEvent;
    if (dragEvent.dataTransfer && dragEvent.dataTransfer.files.length > 0) {
      const file = dragEvent.dataTransfer.files[0];
      if (file.name.endsWith(".yml") || file.name.endsWith(".yaml")) {
        handleFile(e);
      } else {
        // alert("Please upload a Dify DSL file.");
        modalTitle.innerText = "‚ö†Ô∏è Error";
        modalContent.innerText =
          "Unsupported file format. Please upload a valid Dify DSL file.";
        modal.showModal();
      }
    }
  });
</script>
<script>
  // Get the modal element
  const modal = document.getElementById("modal") as HTMLDialogElement;
  const modalTitle = document.getElementById(
    "modalTitle",
  ) as HTMLHeadingElement;
  const modalContent = document.getElementById(
    "modalContent",
  ) as HTMLDivElement;

  // Upload Form
  const form = document.getElementById("uploadForm") as HTMLFormElement;
  async function handleSubmit(event: Event) {
    event.preventDefault();
    // Get form data
    const formData = new FormData(form);
    const selectedTags = document.querySelectorAll(".tag");
    // Check if all required fields are filled
    if (
      !formData.get("workflowname") ||
      !formData.get("description") ||
      !formData.get("dsl-file") ||
      !formData.get("version") ||
      !formData.get("author-name") ||
      !formData.get("social-link") ||
      selectedTags.length === 0
    ) {
      // alert("Please fill out all required fields.");
      modalTitle.innerText = "üòÆ Opps";
      modalContent.innerText = "Please fill out all required fields.";
      modal.showModal();
      return;
    }
    // Add Icon to form data
    const workflow_icon = document.getElementById(
      "workflowIcon",
    ) as HTMLInputElement;
    formData.append("icon", workflow_icon.innerText);
    // Add the selected tags to the form data
    const selectedTagsTree = document.getElementById("selectedTags");
    const tags: string[] = [];
    selectedTags.forEach((tag) => {
      tags.push(tag.textContent as string);
    });
    formData.append("tags", JSON.stringify(tags));
    // console.log("FormData>>>", formData.get("tags"), formData.get("dsl-file"));
    // Send form data to the server
    try {
      const response = await fetch("/api/workflow/upload", {
        method: "POST",
        body: formData,
      });
      if (response.ok) {
        console.log("Response>>>", response.json());
        // alert("Upload successful!");
        modalTitle.innerText = "üéâ Tada!";
        modalContent.innerText = "Upload successful!";
        modal.showModal();
        // Clear the form
        form.reset();
        // Clear the selected tags
        selectedTagsTree!.innerHTML = "";
      } else if (response.status === 401) {
        // alert("Before you upload, please login first.");
        modalTitle.innerText = "üòÆ Opps...";
        modalContent.innerText = "Your login has expired, please login again!";
        const confirmBtn = document.getElementById("confirmBtn") as HTMLButtonElement;
        confirmBtn.textContent = "Login again";
        confirmBtn.classList.add("btn-error");
        confirmBtn.classList.remove("hidden");
        confirmBtn.addEventListener("click", (event: Event) => {
          event.preventDefault();
          window.location.href = "/api/login/github?redirect=" + encodeURIComponent(window.location.pathname + window.location.search);
        });
        modal.showModal();
      } else {
        // alert(
        //   "An error occurred while uploading the file. Please try again or contact us with email: diflowy@greenerai.top",
        // );
        modalTitle.innerText = "üòÆ Opps...";
        modalContent.innerText = "An error occurred while uploading the file. Please try again or contact us with email: diflowy@greenerai.top";
        modal.showModal();
      }
    } catch (error) {
      console.error("Error uploading file:", error);
      // alert(
      //   "Your network is unreachable. Please check your internet connection and try again.",
      // );
      modalTitle.innerText = "üòÆ Opps...";
      modalContent.innerText = "Your network is unreachable. Please check your internet connection and try again.";
      modal.showModal();
    }
  }
  // Add event listener to the form
  form.addEventListener("submit", handleSubmit);
</script>
