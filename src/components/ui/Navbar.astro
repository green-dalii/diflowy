---
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import brand from "../../assets/brand.svg";
import Modal from "./modal.astro";

const navLinks = [
  {
    name: "Discover",
    href: "/discover",
  },
  {
    name: "Share",
    href: "/upload",
  },
  {
    name: "Blog",
    href: "/blog",
  },
  {
    name: "About",
    href: "/about",
  },
];
---

<div
  class="fixed w-full top-0 z-10 py-3 px-5 h-auto flex items-center justify-center header lg:dark:bg-[#1c232aa7] dark:bg-[#1c232a] dark:border-[#3950668a]"
>
  <nav
    aria-label="Main Navigation"
    role="navigation"
    class="w-full flex h-full items-center justify-between"
  >
    <!-- Brand -->
    <div class="xl:flex-none">
      <a href="/">
        <Image
          src={brand}
          alt="Brand Logo"
          class="w-32 sm:w-[6em]"
          loading="eager"
        />
      </a>
    </div>

    <!-- Hamburger menu -->
    <button
      aria-label="menu"
      role="button"
      aria-controls="navmenu"
      aria-expanded="false"
      id="menuButton"
      class="w-10 h-10 lg:hidden cursor-pointer contents"
    >
      <Icon name="bars">
    </button>
  </nav>
  <!-- Nav Menu -->
  <div
    id="navmenu"
    class="w-full px-5 lg:px-0 absolute top-full z-10 lg:static lg:flex lg:flex-grow lg:items-center lg:justify-center overflow-hidden duration-500 h-0 lg:h-full dropdowns dark:bg-[#1c232a] lg:dark:bg-transparent dark:border-[#3950668a]"
  >
    <!-- Nav Links -->
    <ul
      class="flex flex-col lg:flex-row lg:flex-grow lg:justify-center lg:gap-10"
    >
      {
        navLinks.map((link) => {
          return (
            <li class="p-2 px-0">
              <a
                id={link.name}
                href={link.href}
                class="block text-base dark:text-white hover:text-dark dark:hover:text-blue"
              >
                {link.name}
              </a>
            </li>
          );
        })
      }
    </ul>

    <!-- Login -->
    <div class="relative inline-block text-left">
      <div class="flex xl:flex-row xl:items-center xl:gap-4 flex-col xl:ml-4">
        <a id="login-link" href="/login"
          ><button class="btn-secondary w-full xl:w-auto py-2" id="login"
            >Login</button
          >
        </a>
        <div class="hidden dropdown dropdown-end">
          <div tabindex="0" role="button" class="btn btn-ghost rounded-btn">
            User Name
          </div>
          <ul
            tabindex="0"
            class="menu dropdown-content bg-base-100 rounded-box z-[1] mt-4 w-52 p-2 shadow"
          >
            <li><a>User Profile</a></li>
            <li><a>Logout</a></li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>
<Modal />

<script>
  document.addEventListener("DOMContentLoaded", (_) => {
    const menuButton = document.getElementById("menuButton");
    const navMenu = document.getElementById("navmenu");

    let isMenuOpen = false;

    if (menuButton && navMenu) {
      menuButton.addEventListener("click", () => {
        /* Handle the height transition */
        isMenuOpen = !isMenuOpen;

        menuButton.setAttribute("aria-expanded", `${isMenuOpen}`);

        if (isMenuOpen) {
          navMenu.style.height = `${navMenu.scrollHeight + 20}px`;
        } else {
          navMenu.style.height = "0px";
        }
      });

      navMenu.addEventListener("click", () => {
        /* Close menu after using it */
        if (isMenuOpen) {
          isMenuOpen = false;
          navMenu.style.height = "0px";
          navMenu.classList.remove("h-auto");
        }
      });

      window.addEventListener("resize", () => {
        /* Resize cleanup screen state*/
        if (window.innerWidth >= 1024) {
          /* Add height if menu was closed and then resize happened */
          navMenu.style.height = "auto";
          navMenu.classList.remove("h-0");
        } else {
          /* Prevent opened menu when going from bit to small */
          navMenu.style.height = "0px";
        }
      });
    }
  });
</script>
<script>
  interface User {
    username: string;
  }

  interface UserResponse {
    user: User | null;
  }

  // Get the modal element
  const modal = document.getElementById("modal") as HTMLDialogElement;
  const modalTitle = document.getElementById(
    "modalTitle",
  ) as HTMLHeadingElement;
  const modalContent = document.getElementById(
    "modalContent",
  ) as HTMLDivElement;

  function confirmLogiut(event: MouseEvent) {
    event.preventDefault();
    modalTitle.innerText = "ðŸ¤” Logout?";
    modalContent.innerText = "Would you like to logout from Diflowy?";
    const confirmBtn = document.getElementById("confirmBtn") as HTMLButtonElement;
    confirmBtn.textContent = "Logout";
    confirmBtn.classList.add("btn-error");
    confirmBtn.classList.remove("hidden");
    confirmBtn.addEventListener("click", handleLogout);
    modal.showModal();
  }

  async function handleLogout(event: MouseEvent) {
    event.preventDefault();
    try {
      const response = await fetch("/api/logout", {
        method: "POST",
      });
      if (response.ok) {
        console.log("Logout successful");
        sessionStorage.removeItem("username");
        window.location.href = "/login";
      } else {
        console.error("Failed to log out, server returned an error.");
      }
    } catch (error) {
      console.error("Failed to log out, network error:", error);
    }
  }

  async function loadUserFromStorage() {
    const username = sessionStorage.getItem("username");
    const loginButton = document.getElementById("login") as HTMLButtonElement;
    const loginLink = document.getElementById(
      "login-link",
    ) as HTMLAnchorElement;
    const protectedContent = document.getElementById(
      "protected-content",
    ) as HTMLDivElement | null;
    if (username) {
      console.log("Loaded username from sessionStorage:", username);
      loginButton.textContent = username;
      loginLink.setAttribute("href", "#");
      loginLink.addEventListener("click", confirmLogiut);
      if (protectedContent) {
        protectedContent.style.display = "block";
      }
    } else {
      console.log("No username found in sessionStorage, Call User API...");
      const response = await fetch("/api/user");
      const data: UserResponse = await response.json();
      console.log("fetch user data>>>", data);
      if (data.user) {
        console.log("User found in server response");
        sessionStorage.setItem("username", data.user.username);
        loginButton.textContent = `${data.user.username}`;
        loginLink.setAttribute("href", "#");
        loginLink.addEventListener("click", confirmLogiut);
        if (protectedContent) {
          protectedContent.style.display = "block";
        }
      } else {
        console.log("No user found in server response");
        sessionStorage.removeItem("username");
        loginButton.textContent = "Login";
        loginLink.setAttribute("href", "/login");
        if (protectedContent) {
          protectedContent.style.display = "none";
        }
      }
    }
  }

  document.addEventListener("DOMContentLoaded", function () {
    loadUserFromStorage();
  });
</script>
